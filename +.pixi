//constants
//constants
//constants

null = 0;
false = 0;
true = 1;
medium_array = 64;

//primitive functions
//primitive functions
//primitive functions

fn dummy()
{
    ret(0);
}

//memory functions
//memory functions
//memory functions

fn container_count()
{
    $count = new();
    ret($count);
}

fn print_container_count()
{
    $temp = container_count();
    printf("Container count: %d\n", $temp);
    remove($temp);
}

fn flex($object,$size)
{
    $newsize = get_size($object) + $size;
    resize($object,$newsize);
    ret($newsize);
}


//util functions
//util functions
//util functions

fn refresh_seed()
{
    rand_seed( get_timer() + get_ticks() );
}

fn random($min,$max)
{
    //considering that rand() returns a value between 0 and 32767
    ret((rand() % ($max - $min + 1)) + $min);
}

fn default($obj, $default)
{
    if($obj == null)
    {
        ret($default);
    }
    else
    {
        ret($obj);
    }
}

//list functions
//list functions
//list functions

fn list_push($list,$element)
{
    $list[flex($list, 1)-1] = $element;
}

fn list_pop($list)
{
    flex($list, -1);
}

fn list_insert($list,$element,$position)
{
    $oldsize = flex($list, 1) - 1;
    $position = default($position,$oldsize);
    for($i = $oldsize; $i >= $position; $i-1)
    {
        $list[$i+1] = $list[$i];
    }
    $list[$position] = $element;
    remove($oldsize);
    //remove($position);
}

fn list_remove($list,$position)
{
    $oldsize = get_size($list);
    for($i = $position; $i < $oldsize; $i+1)
    {
        $list[$i] = $list[$i+1];
    }
    resize($list,$oldsize - 1);
    remove($oldsize);
    //remove($position);
}

fn list_find($list,$element)
{
    $oldsize = get_size($list);
    for($i = 0; $i < $oldsize; $i+1)
    {
        if($list[$i] == $element)
        {
            ret($i);
        }
    }
    remove($oldsize);
    ret(-1);
}

//strings functions
//strings functions
//strings functions

fn string_new($size)
{
    $temp = "";
    $temp = new($size);
    ret($temp);
}

fn string_sub($string,$start,$end)
{
    $newstr = "";
    resize($newstr,$end - $start);
    $offset = 0;
    for($i = $start; $i < $end; $i+1)
    {
        $newstr[$offset] = $string[$i];
        $offset = $offset + 1;
    }
    ret($newstr);
}

//counting ocurrences using strstr
fn string_ocurrences($str1,$str2)
{
    $count = 0;
    $offset = 0;
    $len = strlen($str2);
    while($offset <= strlen($str1))
    {
        $offset = strstr($str1,$offset,$str2);
		if($offset == -1)
        {
            break;
        }
		$count = $count + 1;
        $offset = $offset + $len;
	}
    //remove($offset);
    ret($count);
}

//this string returns the positions of each ocurrence
fn string_ocurrences_advanced($str1,$str2)
{
    $count = 0;
    $offset = 0;
    $len = strlen($str2);
    $result = new(string_ocurrences($str1,$str2));
    while($offset <= strlen($str1))
    {
        $offset = strstr($str1,$offset,$str2);
        if($offset == -1)
        {
            break;
        }
        $result[$count] = $offset;
        $count = $count + 1;
        $offset = $offset + $len;
    }

    ret($result);
}

fn string_split($string,$separator)
{
    $offset = 0;
    $len = strlen($separator);
    $ocurrences = string_ocurrences_advanced($string,$separator);
    $result = new(get_size($ocurrences)+1);
    clean($result);
    for($i = 0; $i < get_size($result)-1; $i+1)
    {
        $temp = string_sub($string,$offset,$ocurrences[$i])
        $result[$i] = clone($temp);
        $offset = $ocurrences[$i] + $len;
    }
    $temp = string_sub($string,$offset,strlen($string));
    $result[get_size($result)-1] = clone($temp);
    remove($ocurrences);
    ret($result);
}

fn string_replace($string,$oldstr,$newstr)
{
    $result = "";
    $offset = 0;
    $len = strlen($oldstr);
    $ocurrences = string_ocurrences_advanced($string,$oldstr);
    for($i = 0; $i < get_size($ocurrences); $i+1)
    {
        $result = string_sub($string,$offset,$ocurrences[$i]);
        $offset = $ocurrences[$i] + $len;
    }
    $result = string_sub($string,$offset,strlen($string));
    remove($ocurrences);
    ret($result);
}

fn string_replace_char($string,$oldchar,$newchar)
{
    for($i = 0; $i < strlen($string); $i+1)
    {
        if($string[$i] == $oldchar)
        {
            $string[$i] = $newchar;
        }
        else
        {
            $string[$i] = $string[$i];
        }
    }
    ret($string);
}

//basic constructors
//basic constructors
//basic constructors

fn vector2($x, $y)
{
    $temp = new();
    $temp.x = $x;
    $temp.y = $y;
    ret($temp);
}

//file functions
//file functions
//file functions

fn read_file($filename)
{
    $size = get_file_size($filename);
    $file = fopen($filename,"rb");
    if($file == null)
    {
        ret(null);
    }
    $result = "";
    resize($result, $size);
    fread($result,$size,$file);
    fclose($file);
    ret($result);
}

fn write_file($filename,$content)
{
    $file = fopen($filename,"wb");
    fputs($content,$file);
    fclose($file);
    //remove($file);
}

//ini functions
//ini functions
//ini functions

//ini loader without sections
fn ini_load($file)
{
    $result = new();
    $splited = string_split($file,"\n");
    $lsplited = new();
    for($i = 0; $i < get_size($splited); $i+1)
    {
        $lsplited = string_split($splited[$i]," ");
        if(strstr($lsplited[1],"\"") != -1)
        {
            $lsplited[1] = string_replace_char($lsplited[1],"\"","");
        }
        else
        {
            $lsplited[1] = str_to_num($lsplited[1]);
        }
        set_prop($result,$lsplited[0],$lsplited[1]);
    }
    remove($lsplited);
    remove($splited);
    remove($file);
    ret($result);
}

// should avoid using this function for now
fn ini_save($file,$ini)
{
    $result = "";
    $keys = get_proplist($ini);
    $strnum = "";
    for($i = 0; $i < get_size($keys); $i+1)
    {
        strcat($result,$keys[$i]);
        strcat($result," ");
        num_to_str($strnum,get_prop($ini,$keys[$i]));
        strcat($result,$strnum);
        strcat($result,"\n");
        //$result = $result + $keys[$i] + " " + $ini[$keys[$i]] + "\n";
    }
    printf("%s\n", $result);
    write_file($file,$result);
    remove($result);
    remove($keys);
}

//UI functions
//UI functions
//UI functions

fn ui_text_new($ui,$x,$y,$text)
{
    $temp = new();
    $temp.x = $x;
    $temp.y = $y;
    $temp.text = $text;
    list_push($ui.text,$temp);
    ret($temp);
}

fn ui_button_new($ui,$x,$y,$width,$height,$text,$callback,$arg)
{
    $temp = new();
    $temp.x = $x;
    $temp.y = $y;
    $temp.width = $width;
    $temp.height = $height;
    $temp.text = $text;
    $temp.callback = $callback;
    $temp.arg = $arg;
    list_push($ui.button,$temp);
    ret($temp);
}

fn ui_new($x,$y,$width,$height)
{
    $temp = new();
    $temp.x = $x;
    $temp.y = $y;
    $temp.width = $width;
    $temp.height = $height;
    $temp.color = get_color(0,15,30);
    $temp.text = new();
    $temp.button = new();
    ret($temp);
}

fn ui_draw($ui)
{
    fbox($ui.x,$ui.y,$ui.width,$ui.height,$ui.color);
    box($ui.x-1,$ui.y-1,$ui.width+1,$ui.height+1,WHITE);
    $temp = new();
    $medx = ($ui.x + $ui.width)/2;
    $medy = ($ui.y + $ui.height)/2;

    for($i = 0; $i < get_size($ui.text); $i+1)
    {
        print($ui.text[$i].text, $medx + $ui.text[$i].x, $medy + $ui.text[$i].y);
    }
}


// input functions
// input functions
// input functions

fn key_new($keycode,$callback,$down)//down = 1 for down, 0 for up
{
    $temp = new();
    $temp.keycode = $keycode;
    $temp.callback = $callback;
    $temp.down = default($down,1);
    ret($temp);
}

fn keyboard_new($callback)
{
    $temp = new();
    $temp.keys = new();
    ret($temp);
}

fn eventor()
{
    while(get_event()) 
    {
        if EVT[ EVT_TYPE ] == EVT_QUIT 
        {
            halt; 
        }
        
        if EVT[EVT_TYPE] == EVT_BUTTONDOWN
        {
            key = EVT[ EVT_KEY ];
        }
        
        if EVT[EVT_TYPE] == EVT_BUTTONUP
        {
            key = EVT[ EVT_KEY ];
        }
    }
}

//startup functions
//startup functions
//startup functions

fn system_loop($system, $callback, $arg)
{
    while(true)
    {
        eventor($system);
        $callback(default($arg,null));
        frame();
    }
}

fn system_new($configpath)
{
    $configpath = default($configpath,"config.ini");
    $system = new();
    $system.config = ini_load(read_file($configpath));
    if($system.config == null)
    {
        printf("Error loading config file: %s\n", $configpath);
        halt;
    }
    else
    {
        $system.config.width = default($system.config.width,WINDOW_XSIZE);
        $system.config.height = default($system.config.height,WINDOW_YSIZE);
        resize( get_screen(), $system.config.width, $system.config.height );
        set_pixel_size( WINDOW_XSIZE / $system.config.width );
    }

    $system.keyboard = keyboard_new();
    start_timer(0);
    refresh_seed();//required to get a different random number each time  
    ret($system);
}