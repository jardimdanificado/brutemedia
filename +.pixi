//constants
//constants
//constants

null = 0;
false = 0;
true = 1;
medium_array = 64;

//primitive functions
//primitive functions
//primitive functions

fn dummy()
{
    ret(0);
}

//memory functions
//memory functions
//memory functions

fn container_count()
{
    $count = new();
    ret($count);
}

fn print_container_count()
{
    $temp = container_count();
    printf("Container count: %d\n", $temp);
    remove($temp);
}

fn flex($object,$size)
{
    $newsize = get_size($object) + $size;
    resize($object,$newsize);
    ret($newsize);
}

//complex functions
//complex functions
//complex functions

fn eventor($downkb, $upkb)
{
    while(get_event()) 
    {
        if EVT[ EVT_TYPE ] == EVT_QUIT 
        {
            halt; 
        }
        
        if EVT[EVT_TYPE] == EVT_BUTTONDOWN
        {
            key = EVT[ EVT_KEY ];
            $downkb(key);
        }
        
        if EVT[EVT_TYPE] == EVT_BUTTONUP
        {
            key = EVT[ EVT_KEY ];
            $upkb(key);
        }
    }
}

//util functions
//util functions
//util functions

fn refresh_seed()
{
    rand_seed( get_timer() + get_ticks() );
}

fn random($min,$max)
{
    //considering that rand() returns a value between 0 and 32767
    ret((rand() % ($max - $min + 1)) + $min);
}

fn default($obj, $default)
{
    if($obj == null)
    {
        ret($default);
    }
    else
    {
        ret($obj);
    }
}

//list functions
//list functions
//list functions

fn list_push($list,$element)
{
    $list[flex($list, 1)-1] = $element;
}

fn list_pop($list)
{
    flex($list, -1);
}

fn list_insert($list,$element,$position)
{
    $oldsize = flex($list, 1) - 1;
    $position = default($position,$oldsize);
    for($i = $oldsize; $i >= $position; $i-1)
    {
        $list[$i+1] = $list[$i];
    }
    $list[$position] = $element;
    remove($oldsize);
    //remove($position);
}

fn list_remove($list,$position)
{
    $oldsize = get_size($list);
    for($i = $position; $i < $oldsize; $i+1)
    {
        $list[$i] = $list[$i+1];
    }
    resize($list,$oldsize - 1);
    remove($oldsize);
    //remove($position);
}

fn list_find($list,$element)
{
    $oldsize = get_size($list);
    for($i = 0; $i < $oldsize; $i+1)
    {
        if($list[$i] == $element)
        {
            ret($i);
        }
    }
    remove($oldsize);
    ret(-1);
}

//strings functions
//strings functions
//strings functions

fn string_new($size)
{
    $temp = "";
    $temp = new($size);
    ret($temp);
}

fn string_sub($string,$start,$end)
{
    $newstr = "";
    resize($newstr,$end - $start);
    $offset = 0;
    for($i = $start; $i < $end; $i+1)
    {
        $newstr[$offset] = $string[$i];
        $offset = $offset + 1;
    }
    ret($newstr);
}

//counting ocurrences using strstr
fn string_ocurrences($str1,$str2)
{
    $count = 0;
    $offset = 0;
    $len = strlen($str2);
    while($offset <= strlen($str1))
    {
        $offset = strstr($str1,$offset,$str2);
		if($offset == -1)
        {
            break;
        }
		$count = $count + 1;
        $offset = $offset + $len;
	}
    //remove($offset);
    ret($count);
}

//this string returns the positions of each ocurrence
fn string_ocurrences_advanced($str1,$str2)
{
    $count = 0;
    $offset = 0;
    $len = strlen($str2);
    $result = new(string_ocurrences($str1,$str2));
    while($offset <= strlen($str1))
    {
        $offset = strstr($str1,$offset,$str2);
        if($offset == -1)
        {
            break;
        }
        $result[$count] = $offset;
        $count = $count + 1;
        $offset = $offset + $len;
    }
    //remove($offset);
    ret($result);
}

fn string_split($string,$separator)
{
    $lastoffset = 0;
    $count = 0;
    $ocurrences = string_ocurrences_advanced($string,$separator);
    $result = new(get_size(string_ocurrences_advanced($string,$separator)));
    for($i = 0; $i < get_size($ocurrences); $i+1)
    {
        $result[$count] = string_sub($string,$lastoffset,$ocurrences[$i]);
        $count = $count + 1;
        $lastoffset = $ocurrences[$i] + strlen($separator);
    }
    $result[$count] = string_sub($string,$lastoffset,strlen($string));
    remove($ocurrences);
    ret($result);
}

/*fn string_replace($string,$oldstr,$newstr)
{
	$ocurrences = string_ocurrences($string,$oldstr);
    $result = "";
	$offset = 0;
	while($offset < strlen($string))
	{
		$offset = strstr($string,$oldstr,$offset);
		if($offset == -1)
        {
            break;
        }
		
		$offset = 0;
        $i = $i + 1;
	}
    ret($result);
}*/

//basic constructors
//basic constructors
//basic constructors

fn vector2($x, $y)
{
    $temp = new();
    $temp.x = $x;
    $temp.y = $y;
    ret($temp);
}

//file functions
//file functions
//file functions

fn read_file($filename)
{
    $size = get_file_size($filename);
    $file = fopen($filename,"rb");
    if($file == null)
    {
        ret(null);
    }
    $result = "";
    resize($result, $size);
    fread($result,$size,$file);
    fclose($file);
    $buff = "";
    strcat($buff,$result);
    ret($buff);
}

//ini functions
//ini functions
//ini functions

//ini loader without sections
fn ini_load($file)
{
    $lines = string_split($file,";");
    $result = new();
    for($i = 0; $i < get_size($lines); $i+1)
    {
        printf("%s\n",$lines[$i]);
        $splited = string_split($lines[$i],"=");
        set_prop($result,$splited[0],$splited[1]);
        //$result[$i] = string_split($lines[$i],"=");
    }
    
    remove($lines);
    ret($result);
}