//constants
//constants
//constants

null = 0;
false = 0;
true = 1;
medium_array = 64;

//primitive functions
//primitive functions
//primitive functions

fn quit()
{
    while(get_event()) 
    { 
        if EVT[ EVT_TYPE ] == EVT_QUIT 
        { 
            halt; 
        } 
    }
}

fn refresh_seed()
{
    rand_seed( get_timer() + get_ticks() );
}

fn random($min,$max)
{
    //considering that rand() returns a value between 0 and 32767
    ret((rand() % ($max - $min + 1)) + $min);
}

fn string_sub($string,$start,$end)
{
    $result = "";
	$temp = "";
    $offset = 0;
	$temp = copy($string);
	sprintf2( $temp, $start, 0, "");
	logf("sub:%d",$end - $start);
	resize($temp,($end - $start));
	ret($temp);
}

//counting ocurrences using strstr
fn string_ocurrences($str1,$str2)
{
    $count = 0;
    $offset = 0;
    $len = strlen($str2);
    while($offset <= strlen($str1))
    {
        $offset = strstr($str1,$offset,$str2);
		if($offset == -1)
        {
            break;
        }
		$count = $count + 1;
        $offset = $offset + $len;
	}
	logf("occurrences:%d\n", $count);
    ret($count);
}

fn string_ocurrences_advanced($str1,$str2)
{
    $offset = 0;
    $len = strlen($str2);
	$ocurrences = string_ocurrences($str1,$str2);
	$lista = new($ocurrences);
    while($offset <= strlen($str1))
    {
        $offset = strstr($str1,$offset,$str2);
		if($offset == -1)
        {
            break;
        }
		$lista[$i] = $offset;
        $offset = $offset + $len;
	}
	$result = new();
	$result.ocurrences = $ocurrences;
	$result.indexes = $lista;
    ret($result);
}

fn string_split($string,$separator)
{
    $ocurrences = string_ocurrences($string,$separator);
	
    $result = new($ocurrences + 1);
    $offset = 0;
    $i = 0;
    while($offset < strlen($string))
    {
        $offset = strstr($string,$separator,$offset);
        if($offset == -1)
        {
            break;
        }
        $result[$i] = string_sub($string,$offset,$ocurrences[$i+1]);
		
        $i = $i + 1;
    }
    $result[$i] = $string;
    ret($result);
}

fn string_replace($string,$oldstr,$newstr)
{
	$ocurrences = string_ocurrences($string,$oldstr);
    $result = "";
	$offset = 0;
	while($offset < strlen($string))
	{
		$offset = strstr($string,$oldstr,$offset);
		if($offset == -1)
        {
            break;
        }
		
		$offset = 0;
        $i = $i + 1;
	}
}

//basic constructors
//basic constructors
//basic constructors

fn Vector2($x, $y)
{
    $temp = new();
    $temp.x = $x;
    $temp.y = $y;
    ret($temp);
}

//complex constructors
//complex constructors
//complex constructors

fn Creature($name,$position,$current_room)//String, Vector2, INT
{
    if($position == null)
    {
        $position = Vector2(0,0);
    }
    
    $temp = new();
    $temp.position = $position;
    $temp.name = $name;
    $temp.current_room = $current_room;
    ret($temp);
}

fn Room($position,$size)//Vector2, Vector2
{
    $temp = new();
    $temp.position = $position;
    $temp.size = $size;
    ret($temp);
}

fn World($size)//Vector2
{
    if($size == null)
    {
        $size = Vector2(64,64);
    }
    $world = new();
    $world.map = new($size.x,$size.y);
    clean($world.map);
    for($x = 0; $x < $size.x; $x+1)
    {
        for($y = 0; $y < $size.y; $y+1)
        {
            $world.map[$x][$y] = Room(Vector2($x,$y),Vector2(16,16));
        }
    }
    $world.creatures = new(64);
    clean($world.creatures);
    ret($world);
}

//complex functions
//complex functions
//complex functions

fn startup()
{
    set_pixel_size( WINDOW_XSIZE / 480 );
    resize( get_screen(), WINDOW_XSIZE, WINDOW_YSIZE );
    //declare a vector of creatures
    printf("antes\n");
    world = World();
    world.creatures[0] = new();
    $hero = Creature("joao", 78);
    world.creatures[0] = $hero;
    printf( "%s\n", world.creatures[0].name );
    start_timer( 0 );
    refresh_seed();//required to get a different random number each time
    for( $i = 0; $i < 10; $i+1 )
    {
        //printf( "%d\n", random(99,200) );
    }
}

//main loop
//main loop
//main loop
fn main()
{
    //test string_split
    printf("%d\n", Vector2(8.0,12123.0).x);
    //printf("%s\n", Vector2(8.0,12123.0).ID);
    startup();
    mainloop:
        
        clear(BLACK);
        
        $b = 2;
        
        for($i = -100; $i < 100; $i+10)
        {
            $b+8;
            transp($b);
            print( "L", $i, 0 );
        }
		
		print(string_split("joao,maria,pedro",",")[0],10,10);
		
        //required to verify the quit event
        quit();

        //required to end the frame
        frame();

    go mainloop;
    startup();
    quit();
}

main();
