include "brute.pixi";

fn print_fps($a)
{
    printf("FPS: %u\n", FPS);
}
functions.print_fps = print_fps;

fn print_fps_screen($a)
{
    print( "$str", 0, 0, BLACK, TOP | LEFT )
    //printf("FPS: %u\n%s\n", FPS, $str);
    //remove($str);
}
functions.print_fps_screen = print_fps_screen;

fn print_char($char)
{
    printf("%c\n", $char);
}
functions.print_char = print_char;

fn print_int($num)
{
    printf("%d\n", $num);
}
functions.print_int = print_int;

fn print_float($num)
{
    printf("%f\n", $num);
}
functions.print_float = print_float;

fn print_string($str)
{
    printf("%s\n", $str);
}
functions.print_string = print_string;

fn print_bool($bool)
{
    if($bool == 1)
    {
        printf("true\n");
    }
    else
    {
        printf("false\n");
    }
}
functions.print_bool = print_bool;

fn print_color($color)
{
    printf("r:%d g:%d b:%d\n", get_red($color), get_green($color), get_blue($color));
}
functions.print_color = print_color;

fn print_array_int($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        printf("%d", $array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_int = print_array_int;

fn print_array_float($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        printf("%f", $array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_float = print_array_float;

fn print_array_string($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        printf("%s", $array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_string = print_array_string;

fn print_array_bool($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        if($array[$i] == 1)
        {
            printf("true");
        }
        else
        {
            printf("false");
        }
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_bool = print_array_bool;

fn print_array_color($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        printf("r:%d g:%d b:%d", get_red($array[$i]), get_green($array[$i]), get_blue($array[$i]));
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_color = print_array_color;

fn print_array_array_int($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        print_array_int($array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_array_int = print_array_array_int;

fn print_array_array_float($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        print_array_float($array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_array_float = print_array_array_float;

fn print_array_array_string($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        print_array_string($array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_array_string = print_array_array_string;

fn print_array_array_bool($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        print_array_bool($array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_array_bool = print_array_array_bool;

fn print_array_array_color($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        print_array_color($array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_array_color = print_array_array_color;

fn RUN($func,$args)
{
    $size = get_size($args);
    if($size == 1)
    {
        get_prop(functions,$func)($args[0]);
    }
    else
    {
        if($size == 2)
        {
            get_prop(functions,$func)($args[0],$args[1]);
        }
        else
        {
            if($size == 3)
            {
                get_prop(functions,$func)($args[0],$args[1],$args[2]);
            }
            else
            {
                if($size == 4)
                {
                    get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3]);
                }
                else
                {
                    if($size == 5)
                    {
                        get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3],$args[4]);
                    }
                    else
                    {
                        if($size == 6)
                        {
                            get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3],$args[4],$args[5]);
                        }
                        else
                        {
                            if($size == 7)
                            {
                                get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6]);
                            }
                            else
                            {
                                if($size == 8)
                                {
                                    get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6],$args[7]);
                                }
                                else
                                {
                                    if($size == 9)
                                    {
                                        get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6],$args[7],$args[8]);
                                    }
                                    else
                                    {
                                        if($size == 10)
                                        {
                                            get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6],$args[7],$args[8],$args[9]);
                                        }
                                        else
                                        {
                                            if($size == 11)
                                            {
                                                get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6],$args[7],$args[8],$args[9],$args[10]);
                                            }
                                            else
                                            {
                                                if($size == 12)
                                                {
                                                    get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6],$args[7],$args[8],$args[9],$args[10],$args[11]);
                                                }
                                                else
                                                {
                                                    if($size == 13)
                                                    {
                                                        get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6],$args[7],$args[8],$args[9],$args[10],$args[11],$args[12]);
                                                    }
                                                    else
                                                    {
                                                        if($size == 14)
                                                        {
                                                            get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6],$args[7],$args[8],$args[9],$args[10],$args[11],$args[12],$args[13]);
                                                        }
                                                        else
                                                        {
                                                            if($size == 15)
                                                            {
                                                                get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6],$args[7],$args[8],$args[9],$args[10],$args[11],$args[12],$args[13],$args[14]);
                                                            }
                                                            else
                                                            {
                                                                if($size == 16)
                                                                {
                                                                    get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6],$args[7],$args[8],$args[9],$args[10],$args[11],$args[12],$args[13],$args[14],$args[15]);
                                                                }
                                                                else
                                                                {
                                                                    if($size == 17)
                                                                    {
                                                                        get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6],$args[7],$args[8],$args[9],$args[10],$args[11],$args[12],$args[13],$args[14],$args[15],$args[16]);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6],$args[7],$args[8],$args[9]);
}

fn layer_new($system, $layer)
{
    list_push($system.layers, $layer);
}
functions.layer_new = layer_new;

fn interpret($command)
{
    //printf("command: %s\n", $command);
    $splited = string_split($command, " ");
    $size = get_size($splited);
    $args = new($size-1);
    for ($i = 1; $i < $size; $i+1)
    {
        if(($splited[$i][0] > 47 && $splited[$i][0] < 58) || $splited[$i][0] == '-')
        {
            $args[$i-1] = str_to_num($splited[$i]);
        }
        else
        {
            if($splited[$i][0] == '#')
            {
                $temp = string_sub($splited[$i], 1, get_size($splited[$i]));
                $args[$i-1] = recursive_prop(constants, $temp);
                //printf("r:%d g:%d b:%d\n", get_red($args[$i-1]), get_green($args[$i-1]), get_blue($args[$i-1]));
            }
            else
            {
                if($splited[$i][0] == '$')
                {
                    $temp = string_sub($splited[$i], 1, get_size($splited[$i]));
                    $args[$i-1] = recursive_prop(variables, $temp);
                }
                else
                {
                    $args[$i-1] = $splited[$i];
                }
            }
        }
    }

    RUN($splited[0], $args);

    remove($splited);
    remove($args);
    print_container_count();
}


/*
while(1)
{
    //$command = input();
    interpret("clear #WHITE;frame 0");
    //interpret("printf a234\n");
}
*/