include "brute.pixi";

fn print_fps($a)
{
    printf("FPS: %u\n", FPS);
}
functions.print_fps = print_fps;

fn print_fps_screen($a)
{
    print( "$str", 0, 0, BLACK, TOP | LEFT )
    //printf("FPS: %u\n%s\n", FPS, $str);
    //remove($str);
}
functions.print_fps_screen = print_fps_screen;

fn print_char($char)
{
    printf("%c\n", $char);
}
functions.print_char = print_char;

fn print_int($num)
{
    printf("%d\n", $num);
}
functions.print_int = print_int;

fn print_float($num)
{
    printf("%f\n", $num);
}
functions.print_float = print_float;

fn print_string($str)
{
    printf("%s\n", $str);
}
functions.print_string = print_string;

fn print_bool($bool)
{
    if($bool == 1)
    {
        printf("true\n");
    }
    else
    {
        printf("false\n");
    }
}
functions.print_bool = print_bool;

fn print_color($color)
{
    printf("r:%d g:%d b:%d\n", get_red($color), get_green($color), get_blue($color));
}
functions.print_color = print_color;

fn print_array_int($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        printf("%d", $array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_int = print_array_int;

fn print_array_float($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        printf("%f", $array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_float = print_array_float;

fn print_array_string($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        printf("%s", $array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_string = print_array_string;

fn print_array_bool($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        if($array[$i] == 1)
        {
            printf("true");
        }
        else
        {
            printf("false");
        }
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_bool = print_array_bool;

fn print_array_color($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        printf("r:%d g:%d b:%d", get_red($array[$i]), get_green($array[$i]), get_blue($array[$i]));
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_color = print_array_color;

fn print_array_array_int($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        print_array_int($array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_array_int = print_array_array_int;

fn print_array_array_float($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        print_array_float($array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_array_float = print_array_array_float;

fn print_array_array_string($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        print_array_string($array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_array_string = print_array_array_string;

fn print_array_array_bool($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        print_array_bool($array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_array_bool = print_array_array_bool;

fn print_array_array_color($array)
{
    printf("[");
    for($i=0; $i < get_size($array); $i+1)
    {
        print_array_color($array[$i]);
        if($i < get_size($array)-1)
        {
            printf(", ");
        }
    }
    printf("]\n");
}
functions.print_array_array_color = print_array_array_color;

fn run_function($func,$args)
{
    get_prop(functions,$func)($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6],$args[7],$args[8],$args[9],$args[10],$args[11],$args[12],$args[13],$args[14],$args[15],$args[16],$args[17],$args[18],$args[19],$args[20],$args[21],$args[22],$args[23],$args[24],$args[25],$args[26],$args[27],$args[28],$args[29],$args[30],$args[31],$args[32],$args[33],$args[34],$args[35],$args[36],$args[37],$args[38],$args[39],$args[40],$args[41],$args[42],$args[43],$args[44],$args[45],$args[46],$args[47],$args[48],$args[49],$args[50],$args[51],$args[52],$args[53],$args[54],$args[55],$args[56],$args[57],$args[58],$args[59],$args[60],$args[61],$args[62],$args[63],$args[64],$args[65],$args[66],$args[67],$args[68],$args[69],$args[70],$args[71],$args[72],$args[73],$args[74],$args[75],$args[76],$args[77],$args[78],$args[79],$args[80],$args[81],$args[82],$args[83],$args[84],$args[85],$args[86],$args[87],$args[88],$args[89],$args[90],$args[91],$args[92],$args[93],$args[94],$args[95],$args[96],$args[97],$args[98],$args[99]);
}

fn layer_new($system, $layer)
{
    list_push($system.layers, $layer);
}
functions.layer_new = layer_new;

fn interpret($command)
{
    $splited = string_split($command, " ");
    $size = get_size($splited);
    $args = new($size-1);
    for ($i = 1; $i < $size; $i+1)
    {
        if(($splited[$i][0] > 47 && $splited[$i][0] < 58) || $splited[$i][0] == '-')
        {
            $args[$i-1] = str_to_num($splited[$i]);
        }
        else
        {
            if($splited[$i][0] == '#')
            {
                $temp = string_sub($splited[$i], 1, get_size($splited[$i]));
                $args[$i-1] = recursive_prop(constants, $temp);
            }
            else
            {
                if($splited[$i][0] == '$')
                {
                    $temp = string_sub($splited[$i], 1, get_size($splited[$i]));
                    $args[$i-1] = recursive_prop(variables, $temp);
                }
                else
                {
                    $args[$i-1] = $splited[$i];
                }
            }
        }
    }
    run_function($splited[0], $args);
    for ($i = 0; $i < $size; $i+1)
    {
        remove($splited[$i]);
    }
    remove($splited);
    remove($args);
}
