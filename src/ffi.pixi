
functions = new();
constants = new();
variables = new();

// Constants
// Constants
// Constants

// Container types
constants.INT = INT;
constants.INT8 = INT8;
constants.INT16 = INT16;
constants.INT32 = INT32;
constants.INT64 = INT64;
constants.FLOAT = FLOAT;
constants.FLOAT32 = FLOAT32;
constants.FLOAT64 = FLOAT64;
constants.PIXEL = PIXEL;

// Compression flags
constants.Z_NO_COMPRESSION = Z_NO_COMPRESSION;
constants.Z_BEST_SPEED = Z_BEST_SPEED;
constants.Z_BEST_COMPRESSION = Z_BEST_COMPRESSION;
constants.Z_DEFAULT_COMPRESSION = Z_DEFAULT_COMPRESSION;

// Container flags
constants.CFLAG_INTERP = CFLAG_INTERP;
constants.GL_MIN_LINEAR = GL_MIN_LINEAR;
constants.GL_MAG_LINEAR = GL_MAG_LINEAR;
constants.GL_NICEST = GL_NICEST;
constants.GL_NO_XREPEAT = GL_NO_XREPEAT;
constants.GL_NO_YREPEAT = GL_NO_YREPEAT;
constants.GL_NO_ALPHA = GL_NO_ALPHA;
constants.GL_NPOT = GL_NPOT;

// Container resizing flags
constants.RESIZE_INTERP1 = RESIZE_INTERP1;
constants.RESIZE_INTERP2 = RESIZE_INTERP2;
constants.RESIZE_UNSIGNED_INTERP2 = RESIZE_UNSIGNED_INTERP2;
constants.RESIZE_COLOR_INTERP1 = RESIZE_COLOR_INTERP1;
constants.RESIZE_COLOR_INTERP2 = RESIZE_COLOR_INTERP2;

// Container copying flags
constants.COPY_NO_AUTOROTATE = COPY_NO_AUTOROTATE;
constants.COPY_CLIPPING = COPY_CLIPPING;

// File formats
constants.FORMAT_RAW = FORMAT_RAW;
constants.FORMAT_WAVE = FORMAT_WAVE;
constants.FORMAT_AIFF = FORMAT_AIFF;
constants.FORMAT_OGG = FORMAT_OGG;
constants.FORMAT_MP3 = FORMAT_MP3;
constants.FORMAT_FLAC = FORMAT_FLAC;
constants.FORMAT_MIDI = FORMAT_MIDI;
constants.FORMAT_SUNVOX = FORMAT_SUNVOX;
constants.FORMAT_SUNVOXMODULE = FORMAT_SUNVOXMODULE;
constants.FORMAT_XM = FORMAT_XM;
constants.FORMAT_MOD = FORMAT_MOD;
constants.FORMAT_JPEG = FORMAT_JPEG;
constants.FORMAT_PNG = FORMAT_PNG;
constants.FORMAT_GIF = FORMAT_GIF;
constants.FORMAT_AVI = FORMAT_AVI;
constants.FORMAT_MP4 = FORMAT_MP4;
constants.FORMAT_ZIP = FORMAT_ZIP;
constants.FORMAT_PIXICONTAINER = FORMAT_PIXICONTAINER;

// Load/Save options
constants.LOAD_FIRST_FRAME = LOAD_FIRST_FRAME;
constants.LOAD_AS_RAW = LOAD_AS_RAW;

// GIF saving options
constants.GIF_GRAYSCALE = GIF_GRAYSCALE;
constants.GIF_DITHER = GIF_DITHER;

// JPEG saving options
constants.JPEG_H1V1 = JPEG_H1V1;
constants.JPEG_H2V1 = JPEG_H2V1;
constants.JPEG_H2V2 = JPEG_H2V2;
constants.JPEG_TWOPASS = JPEG_TWOPASS;

// Colors
constants.ORANGE = ORANGE;
constants.BLACK = BLACK;
constants.WHITE = WHITE;
constants.YELLOW = YELLOW;
constants.RED = RED;
constants.GREEN = GREEN;
constants.BLUE = BLUE;

// Alignment
constants.TOP = TOP;
constants.BOTTOM = BOTTOM;
constants.LEFT = LEFT;
constants.RIGHT = RIGHT;

// Effects
constants.EFF_NOISE = EFF_NOISE;
constants.EFF_SPREAD_LEFT = EFF_SPREAD_LEFT;
constants.EFF_SPREAD_RIGHT = EFF_SPREAD_RIGHT;
constants.EFF_SPREAD_UP = EFF_SPREAD_UP;
constants.EFF_SPREAD_DOWN = EFF_SPREAD_DOWN;
constants.EFF_HBLUR = EFF_HBLUR;
constants.EFF_VBLUR = EFF_VBLUR;
constants.EFF_COLOR = EFF_COLOR;

// OpenGL constants
constants.GL_POINTS = GL_POINTS;
constants.GL_LINE_STRIP = GL_LINE_STRIP;
constants.GL_LINE_LOOP = GL_LINE_LOOP;
constants.GL_LINES = GL_LINES;
constants.GL_TRIANGLE_STRIP = GL_TRIANGLE_STRIP;
constants.GL_TRIANGLE_FAN = GL_TRIANGLE_FAN;
constants.GL_TRIANGLES = GL_TRIANGLES;

constants.GL_ZERO = GL_ZERO;
constants.GL_ONE = GL_ONE;
constants.GL_SRC_COLOR = GL_SRC_COLOR;
constants.GL_ONE_MINUS_SRC_COLOR = GL_ONE_MINUS_SRC_COLOR;
constants.GL_DST_COLOR = GL_DST_COLOR;
constants.GL_ONE_MINUS_DST_COLOR = GL_ONE_MINUS_DST_COLOR;
constants.GL_SRC_ALPHA = GL_SRC_ALPHA;
constants.GL_ONE_MINUS_SRC_ALPHA = GL_ONE_MINUS_SRC_ALPHA;
constants.GL_DST_ALPHA = GL_DST_ALPHA;
constants.GL_ONE_MINUS_DST_ALPHA = GL_ONE_MINUS_DST_ALPHA;
constants.GL_SRC_ALPHA_SATURATE = GL_SRC_ALPHA_SATURATE;

constants.GL_BFB_IDENTITY_MATRIX = GL_BFB_IDENTITY_MATRIX;

constants.GL_MAX_TEXTURE_SIZE = GL_MAX_TEXTURE_SIZE;
constants.GL_MAX_VERTEX_ATTRIBS = GL_MAX_VERTEX_ATTRIBS;
constants.GL_MAX_VERTEX_UNIFORM_VECTORS = GL_MAX_VERTEX_UNIFORM_VECTORS;
constants.GL_MAX_VARYING_VECTORS = GL_MAX_VARYING_VECTORS;
constants.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS;
constants.GL_MAX_TEXTURE_IMAGE_UNITS = GL_MAX_TEXTURE_IMAGE_UNITS;
constants.GL_MAX_FRAGMENT_UNIFORM_VECTORS = GL_MAX_FRAGMENT_UNIFORM_VECTORS;

constants.GL_SHADER_SOLID = GL_SHADER_SOLID;
constants.GL_SHADER_GRAD = GL_SHADER_GRAD;
constants.GL_SHADER_TEX_ALPHA_SOLID = GL_SHADER_TEX_ALPHA_SOLID;
constants.GL_SHADER_TEX_ALPHA_GRAD = GL_SHADER_TEX_ALPHA_GRAD;
constants.GL_SHADER_TEX_RGB_SOLID = GL_SHADER_TEX_RGB_SOLID;
constants.GL_SHADER_TEX_RGB_GRAD = GL_SHADER_TEX_RGB_GRAD;

constants.GL_SCREEN = GL_SCREEN;
constants.GL_ZBUF = GL_ZBUF;

// Audio constants
constants.AUDIO_FLAG_INTERP2 = AUDIO_FLAG_INTERP2;

// MIDI constants
constants.MIDI_PORT_READ = MIDI_PORT_READ;
constants.MIDI_PORT_WRITE = MIDI_PORT_WRITE;

// Events constants
constants.EVT = EVT;
constants.EVT_TYPE = EVT_TYPE;
constants.EVT_FLAGS = EVT_FLAGS;
constants.EVT_TIME = EVT_TIME;
constants.EVT_X = EVT_X;
constants.EVT_Y = EVT_Y;
constants.EVT_KEY = EVT_KEY;
constants.EVT_SCANCODE = EVT_SCANCODE;
constants.EVT_PRESSURE = EVT_PRESSURE;

constants.EVT_MOUSEBUTTONDOWN = EVT_MOUSEBUTTONDOWN;
constants.EVT_MOUSEBUTTONUP = EVT_MOUSEBUTTONUP;
constants.EVT_MOUSEMOVE = EVT_MOUSEMOVE;
constants.EVT_TOUCHBEGIN = EVT_TOUCHBEGIN;
constants.EVT_TOUCHEND = EVT_TOUCHEND;
constants.EVT_TOUCHMOVE = EVT_TOUCHMOVE;
constants.EVT_BUTTONDOWN = EVT_BUTTONDOWN;
constants.EVT_BUTTONUP = EVT_BUTTONUP;
constants.EVT_SCREENRESIZE = EVT_SCREENRESIZE;
constants.EVT_QUIT = EVT_QUIT;

constants.EVT_FLAG_SHIFT = EVT_FLAG_SHIFT;
constants.EVT_FLAG_CTRL = EVT_FLAG_CTRL;
constants.EVT_FLAG_ALT = EVT_FLAG_ALT;
constants.EVT_FLAG_MODE = EVT_FLAG_MODE;
constants.EVT_FLAG_MODS = EVT_FLAG_MODS;
constants.EVT_FLAG_DOUBLECLICK = EVT_FLAG_DOUBLECLICK;

constants.KEY_MOUSE_LEFT = KEY_MOUSE_LEFT;
constants.KEY_MOUSE_MIDDLE = KEY_MOUSE_MIDDLE;
constants.KEY_MOUSE_RIGHT = KEY_MOUSE_RIGHT;
constants.KEY_MOUSE_SCROLLUP = KEY_MOUSE_SCROLLUP;
constants.KEY_MOUSE_SCROLLDOWN = KEY_MOUSE_SCROLLDOWN;
constants.KEY_BACKSPACE = KEY_BACKSPACE;
constants.KEY_TAB = KEY_TAB;
constants.KEY_ENTER = KEY_ENTER;
constants.KEY_ESCAPE = KEY_ESCAPE;
constants.KEY_SPACE = KEY_SPACE;
constants.KEY_F1 = KEY_F1;
constants.KEY_F2 = KEY_F2;
constants.KEY_F3 = KEY_F3;
constants.KEY_F4 = KEY_F4;
constants.KEY_F5 = KEY_F5;
constants.KEY_F6 = KEY_F6;
constants.KEY_F7 = KEY_F7;
constants.KEY_F8 = KEY_F8;
constants.KEY_F9 = KEY_F9;
constants.KEY_F10 = KEY_F10;
constants.KEY_F11 = KEY_F11;
constants.KEY_F12 = KEY_F12;
constants.KEY_UP = KEY_UP;
constants.KEY_DOWN = KEY_DOWN;
constants.KEY_LEFT = KEY_LEFT;
constants.KEY_RIGHT = KEY_RIGHT;
constants.KEY_INSERT = KEY_INSERT;
constants.KEY_DELETE = KEY_DELETE;
constants.KEY_HOME = KEY_HOME;
constants.KEY_END = KEY_END;
constants.KEY_PAGEUP = KEY_PAGEUP;
constants.KEY_PAGEDOWN = KEY_PAGEDOWN;
constants.KEY_CAPS = KEY_CAPS;
constants.KEY_SHIFT = KEY_SHIFT;
constants.KEY_CTRL = KEY_CTRL;
constants.KEY_ALT = KEY_ALT;
constants.KEY_MENU = KEY_MENU;
constants.KEY_UNKNOWN = KEY_UNKNOWN;

constants.QA_NONE = QA_NONE;
constants.QA_CLOSE_VM = QA_CLOSE_VM;

// Threads constants
constants.THREAD_FLAG_AUTO_DESTROY = THREAD_FLAG_AUTO_DESTROY;

// Mathematical constants
constants.M_E = M_E;
constants.M_LOG2E = M_LOG2E;
constants.M_LOG10E = M_LOG10E;
constants.M_LN2 = M_LN2;
constants.M_LN10 = M_LN10;
constants.M_PI = M_PI;
constants.M_2_SQRTPI = M_2_SQRTPI;
constants.M_SQRT2 = M_SQRT2;
constants.M_SQRT1_2 = M_SQRT1_2;

// Data processing operations for op_cn() function
constants.OP_MIN = OP_MIN;
constants.OP_MAX = OP_MAX;
constants.OP_MAXABS = OP_MAXABS;
constants.OP_SUM = OP_SUM;
constants.OP_LIMIT_TOP = OP_LIMIT_TOP;
constants.OP_LIMIT_BOTTOM = OP_LIMIT_BOTTOM;
constants.OP_ABS = OP_ABS;
constants.OP_SUB2 = OP_SUB2;
constants.OP_COLOR_SUB2 = OP_COLOR_SUB2;
constants.OP_DIV2 = OP_DIV2;
constants.OP_H_INTEGRAL = OP_H_INTEGRAL;
constants.OP_V_INTEGRAL = OP_V_INTEGRAL;
constants.OP_H_DERIVATIVE = OP_H_DERIVATIVE;
constants.OP_V_DERIVATIVE = OP_V_DERIVATIVE;
constants.OP_H_FLIP = OP_H_FLIP;
constants.OP_V_FLIP = OP_V_FLIP;

// Data processing operations for op_cc() function
constants.OP_ADD = OP_ADD;
constants.OP_SADD = OP_SADD;
constants.OP_COLOR_ADD = OP_COLOR_ADD;
constants.OP_SUB = OP_SUB;
constants.OP_SSUB = OP_SSUB;
constants.OP_COLOR_SUB = OP_COLOR_SUB;
constants.OP_MUL = OP_MUL;
constants.OP_SMUL = OP_SMUL;
constants.OP_MUL_RSHIFT15 = OP_MUL_RSHIFT15;
constants.OP_COLOR_MUL = OP_COLOR_MUL;
constants.OP_DIV = OP_DIV;
constants.OP_COLOR_DIV = OP_COLOR_DIV;
constants.OP_AND = OP_AND;
constants.OP_OR = OP_OR;
constants.OP_XOR = OP_XOR;
constants.OP_LSHIFT = OP_LSHIFT;
constants.OP_RSHIFT = OP_RSHIFT;
constants.OP_EQUAL = OP_EQUAL;
constants.OP_LESS = OP_LESS;
constants.OP_GREATER = OP_GREATER;
constants.OP_COPY = OP_COPY;
constants.OP_COPY_LESS = OP_COPY_LESS;
constants.OP_COPY_GREATER = OP_COPY_GREATER;

// Data processing operations for op_ccn() function
constants.OP_MUL_DIV = OP_MUL_DIV;
constants.OP_MUL_RSHIFT = OP_MUL_RSHIFT;

// Data processing operations for generator() function
constants.OP_SIN = OP_SIN;
constants.OP_SIN8 = OP_SIN8;
constants.OP_RAND = OP_RAND;

// Sampler constants
constants.SMP_INFO_SIZE = SMP_INFO_SIZE;

// Sample info field numbers
constants.SMP_DEST = SMP_DEST;
constants.SMP_DEST_OFF = SMP_DEST_OFF;
constants.SMP_DEST_LEN = SMP_DEST_LEN;
constants.SMP_SRC = SMP_SRC;
constants.SMP_SRC_OFF_H = SMP_SRC_OFF_H;
constants.SMP_SRC_OFF_L = SMP_SRC_OFF_L;
constants.SMP_SRC_SIZE = SMP_SRC_SIZE;
constants.SMP_LOOP = SMP_LOOP;
constants.SMP_LOOP_LEN = SMP_LOOP_LEN;
constants.SMP_VOL1 = SMP_VOL1;
constants.SMP_VOL2 = SMP_VOL2;
constants.SMP_DELTA = SMP_DELTA;
constants.SMP_FLAGS = SMP_FLAGS;

// Sample info flags
constants.SMP_FLAG_INTERP2 = SMP_FLAG_INTERP2;
constants.SMP_FLAG_INTERP4 = SMP_FLAG_INTERP4;
constants.SMP_FLAG_PINGPONG = SMP_FLAG_PINGPONG;
constants.SMP_FLAG_REVERSE = SMP_FLAG_REVERSE;

// Convolution filter flags
constants.CONV_FILTER_COLOR = CONV_FILTER_COLOR;
constants.CONV_FILTER_BORDER_EXTEND = CONV_FILTER_BORDER_EXTEND;
constants.CONV_FILTER_BORDER_SKIP = CONV_FILTER_BORDER_SKIP;
constants.CONV_FILTER_UNSIGNED = CONV_FILTER_UNSIGNED;

// File dialog options
constants.FDIALOG_FLAG_LOAD = FDIALOG_FLAG_LOAD;

// Native code constants
constants.CCONV_DEFAULT = CCONV_DEFAULT;
constants.CCONV_CDECL = CCONV_CDECL;
constants.CCONV_STDCALL = CCONV_STDCALL;
constants.CCONV_UNIX_AMD64 = CCONV_UNIX_AMD64;
constants.CCONV_WIN64 = CCONV_WIN64;

// POSIX constants
constants.FOPEN_MAX = FOPEN_MAX;
constants.SEEK_CUR = SEEK_CUR;
constants.SEEK_END = SEEK_END;
constants.SEEK_SET = SEEK_SET;
constants.EOF = EOF;
constants.STDIN = STDIN;
constants.STDOUT = STDOUT;
constants.STDERR = STDERR;

// Pixilang info flags
constants.PIXINFO_MULTITOUCH = PIXINFO_MULTITOUCH;
constants.PIXINFO_TOUCHCONTROL = PIXINFO_TOUCHCONTROL;
constants.PIXINFO_NOWINDOW = PIXINFO_NOWINDOW;
constants.PIXINFO_MIDIIN = PIXINFO_MIDIIN;
constants.PIXINFO_MIDIOUT = PIXINFO_MIDIOUT;

// Misc constants
constants.PIXILANG_VERSION = PIXILANG_VERSION;
constants.OS_NAME = OS_NAME;
constants.ARCH_NAME = ARCH_NAME;
constants.LANG_NAME = LANG_NAME;
constants.CURRENT_PATH = CURRENT_PATH;
constants.USER_PATH = USER_PATH;
constants.TEMP_PATH = TEMP_PATH;
constants.OPENGL = OPENGL;
constants.INT_SIZE = INT_SIZE;
constants.FLOAT_SIZE = FLOAT_SIZE;
constants.INT_MAX = INT_MAX;
constants.COLORBITS = COLORBITS;

// Built-in global variables
constants.WINDOW_XSIZE = WINDOW_XSIZE;
constants.WINDOW_YSIZE = WINDOW_YSIZE;
constants.WINDOW_ZSIZE = WINDOW_ZSIZE;
constants.WINDOW_SAFE_AREA_X = WINDOW_SAFE_AREA_X;
constants.WINDOW_SAFE_AREA_Y = WINDOW_SAFE_AREA_Y;
constants.WINDOW_SAFE_AREA_W = WINDOW_SAFE_AREA_W;
constants.WINDOW_SAFE_AREA_H = WINDOW_SAFE_AREA_H;
constants.FPS = FPS;
constants.PPI = PPI;
constants.UI_SCALE = UI_SCALE;
constants.UI_FONT_SCALE = UI_FONT_SCALE;
constants.PIXILANG_INFO = PIXILANG_INFO;

// Sunvox constants
    // Note commands
    constants.NOTECMD_NOTE_OFF = NOTECMD_NOTE_OFF;
    constants.NOTECMD_ALL_NOTES_OFF = NOTECMD_ALL_NOTES_OFF;
    constants.NOTECMD_CLEAN_SYNTHS = NOTECMD_CLEAN_SYNTHS;
    constants.NOTECMD_STOP = NOTECMD_STOP;
    constants.NOTECMD_PLAY = NOTECMD_PLAY;
    constants.NOTECMD_SET_PITCH = NOTECMD_SET_PITCH;
    constants.NOTECMD_CLEAN_MODULE = NOTECMD_CLEAN_MODULE;

    // Flags for sv_init()
    constants.SV_INIT_FLAG_NO_DEBUG_OUTPUT = SV_INIT_FLAG_NO_DEBUG_OUTPUT;
    constants.SV_INIT_FLAG_USER_AUDIO_CALLBACK = SV_INIT_FLAG_USER_AUDIO_CALLBACK;
    constants.SV_INIT_FLAG_OFFLINE = SV_INIT_FLAG_OFFLINE;
    constants.SV_INIT_FLAG_AUDIO_INT16 = SV_INIT_FLAG_AUDIO_INT16;
    constants.SV_INIT_FLAG_AUDIO_FLOAT32 = SV_INIT_FLAG_AUDIO_FLOAT32;
    constants.SV_INIT_FLAG_ONE_THREAD = SV_INIT_FLAG_ONE_THREAD;

    // Flags for sv_get_time_map()
    constants.SV_TIME_MAP_SPEED = SV_TIME_MAP_SPEED;
    constants.SV_TIME_MAP_FRAMECNT = SV_TIME_MAP_FRAMECNT;

    // Flags for sv_get_module_flags()
    constants.SV_MODULE_FLAG_EXISTS = SV_MODULE_FLAG_EXISTS;
    constants.SV_MODULE_FLAG_GENERATOR = SV_MODULE_FLAG_GENERATOR;
    constants.SV_MODULE_FLAG_EFFECT = SV_MODULE_FLAG_EFFECT;
    constants.SV_MODULE_FLAG_MUTE = SV_MODULE_FLAG_MUTE;
    constants.SV_MODULE_FLAG_SOLO = SV_MODULE_FLAG_SOLO;
    constants.SV_MODULE_FLAG_BYPASS = SV_MODULE_FLAG_BYPASS;
    constants.SV_MODULE_INPUTS_OFF = SV_MODULE_INPUTS_OFF;
    constants.SV_MODULE_INPUTS_MASK = SV_MODULE_INPUTS_MASK;
    constants.SV_MODULE_OUTPUTS_OFF = SV_MODULE_OUTPUTS_OFF;
    constants.SV_MODULE_OUTPUTS_MASK = SV_MODULE_OUTPUTS_MASK;

    // Other
    constants.NULL = -1;

// Functions
// Functions
// Functions

// Containers (memory management)
fn __new($xsize, $ysize, $type)
{
    ret(new($xsize, $ysize, $type));
}
functions.new = __new;

fn __remove($pixi_container)
{
    ret(remove($pixi_container));
}
functions.remove = __remove;

fn __remove_with_alpha($pixi_container)
{
    ret(remove_with_alpha($pixi_container));
}
functions.remove_with_alpha = __remove_with_alpha;

fn __resize($pixi_container, $xsize, $ysize, $type, $flags )
{
    ret(resize($pixi_container, $xsize, $ysize, $type, $flags ));
}
functions.resize = __resize;

fn __rotate($pixi_container, $angle)
{
    ret(rotate($pixi_container, $angle));
}
functions.rotate = __rotate;

fn __convert_type($pixi_container, $new_type)
{
    ret(convert_type($pixi_container, $new_type));
}
functions.convert_type = __convert_type;

fn __clean($pixi_container, $v, $offset, $count)
{
    ret(clean($pixi_container, $v, $offset, $count));
}
functions.clean = __clean;

fn __clone($pixi_container)
{
    ret(clone($pixi_container));
}
functions.clone = __clone;

fn __copy($dest, $src, $dest_offset, $src_offset, $count, $dest_step, $src_step, $flags)
{
    ret(copy($dest, $src, $dest_offset, $src_offset, $count, $dest_step, $src_step, $flags));
}
functions.copy = __copy;

fn __get_size($pixi_container)
{
    ret(get_size($pixi_container));
}
functions.get_size = __get_size;

fn __get_xsize($pixi_container)
{
    ret(get_xsize($pixi_container));
}
functions.get_xsize = __get_xsize;

fn __get_ysize($pixi_container)
{
    ret(get_ysize($pixi_container));
}
functions.get_ysize = __get_ysize;

fn __get_esize($pixi_container)
{
    ret(get_esize($pixi_container));
}
functions.get_esize = __get_esize;

fn __get_type($pixi_container)
{
    ret(get_type($pixi_container));
}
functions.get_type = __get_type;

fn __get_flags($pixi_container)
{
    ret(get_flags($pixi_container));
}
functions.get_flags = __get_flags;

fn __set_flags($pixi_container, $flags)
{
    ret(set_flags($pixi_container, $flags));
}
functions.set_flags = __set_flags;

fn __reset_flags($pixi_container, $flags)
{
    ret(reset_flags($pixi_container, $flags));
}
functions.reset_flags = __reset_flags;

fn __get_prop($pixi_container, $prop_name, $default_value)
{
    ret(get_prop($pixi_container, $prop_name, $default_value));
}
functions.get_prop = __get_prop;

fn __set_prop($pixi_container, $prop_name, $value)
{
    ret(set_prop($pixi_container, $prop_name, $value));
}
functions.set_prop = __set_prop;

fn __remove_prop($pixi_container, $prop_name)
{
    ret(remove_prop($pixi_container, $prop_name));
}
functions.remove_prop = __remove_prop;

fn __remove_props($pixi_container)
{
    ret(remove_props($pixi_container));
}
functions.remove_props = __remove_props;

fn __get_proplist($pixi_container)
{
    ret(get_proplist($pixi_container));
}
functions.get_proplist = __get_proplist;

fn __remove_proplist($list)
{
    ret(remove_proplist($list));
}
functions.remove_proplist = __remove_proplist;

fn __show_memory_debug_messages($enable)
{
    ret(show_memory_debug_messages($enable));
}
functions.show_memory_debug_messages = __show_memory_debug_messages;

fn __zlib_pack($source, $level)
{
    ret(zlib_pack($source, $level));
}
functions.zlib_pack = __zlib_pack;

fn __zlib_unpack($source)
{
    ret(zlib_unpack($source));
}
functions.zlib_unpack = __zlib_unpack;

// Strings
fn __num_to_str($num, $radix, $str_offset, $no_null_term)
{
    ret(num_to_str($num, $radix, $str_offset, $no_null_term));
}
functions.num_to_str = __num_to_str;

fn __str_to_num($str, $str_offset, $len)
{
    ret(str_to_num($str, $str_offset, $len));
}
functions.str_to_num = __str_to_num;

fn __strcat($dest, $src)
{
    ret(strcat($dest, $src));
}
functions.strcat = __strcat;

fn __strcat1($dest, $dest_offset, $src, $src_offset)
{
    ret(strcat($dest, $dest_offset, $src, $src_offset));
}
functions.strcat1 = __strcat1;

fn __strcmp($str1, $str2)
{
    ret(strcmp($str1, $str2));
}
functions.strcmp = __strcmp;

fn __strcmp1($str1, $str1_offset, $str2, $str2_offset)
{
    ret(strcmp($str1, $str1_offset, $str2, $str2_offset));
}
functions.strcmp1 = __strcmp1;

fn __strlen($str)
{
    ret(strlen($str));
}
functions.strlen = __strlen;

fn __strlen1($str, $str_offset)
{
    ret(strlen($str, $str_offset));
}
functions.strlen1 = __strlen1;

fn __strstr($str1,$str2)
{
    ret(strstr($str1,$str2));
}
functions.strstr = __strstr;

fn __strstr1($str1,$str1_offset,$str2,$str2_offset)
{
    ret(strstr($str1,$str1_offset,$str2,$str2_offset));
}
functions.strstr = __strstr1;

//not ready for use
fn __sprintf($str, $format, $entry1, $entry2, $entry3, $entry4, $entry5, $entry6, $entry7, $entry8)
{
    ret(sprintf($str, $format, $entry1, $entry2, $entry3, $entry4, $entry5, $entry6, $entry7, $entry8));
}
functions.sprintf = __sprintf;

//not ready for use
fn __sprintf2($str, $str_offset, $no_null_term, $format, $entry1, $entry2, $entry3, $entry4, $entry5, $entry6, $entry7, $entry8)
{
    ret(sprintf2($str, $str_offset, $no_null_term, $format, $entry1, $entry2, $entry3, $entry4, $entry5, $entry6, $entry7, $entry8));
}
functions.sprintf2 = __sprintf2;

//not ready for use
fn __printf($msg, $entry1, $entry2, $entry3, $entry4, $entry5, $entry6, $entry7, $entry8)
{
    ret(printf($msg, $entry1, $entry2, $entry3, $entry4, $entry5, $entry6, $entry7, $entry8));
}
functions.printf = __printf;

//use this instead
fn __printf1($msg)
{
    ret(printf($msg));
}
functions.printf1 = __printf1;

//not ready for use
fn __fprintf($stream, $format, $entry1, $entry2, $entry3, $entry4, $entry5, $entry6, $entry7, $entry8)
{
    ret(fprintf($stream, $format, $entry1, $entry2, $entry3, $entry4, $entry5, $entry6, $entry7, $entry8));
}
functions.fprintf = __fprintf;

// Log management

//not ready for use
fn __logf($format, $entry1, $entry2, $entry3, $entry4, $entry5, $entry6, $entry7, $entry8)
{
    ret(logf($format, $entry1, $entry2, $entry3, $entry4, $entry5, $entry6, $entry7, $entry8));
}
functions.logf = __logf;

fn __get_log()
{
    ret(get_log());
}
functions.get_log = __get_log;

fn __get_system_log()
{
    ret(get_system_log());
}
functions.get_system_log = __get_system_log;

// Working with files
fn __load($name, $filename, $options)
{
    set_prop(variables, $name, load($filename, $options));
}
functions.load = __load;

fn __load0($name, $filename)
{
    set_prop(variables, $name, load($filename));
    ret(get_prop(variables, $name));
}
functions.load0 = __load0;

fn __fload($stream, $options)
{
    ret(fload($stream, $options));
}
functions.fload = __fload;

fn __save($pixi_container, $filename, $format, $options)
{
    ret(save($pixi_container, $filename, $format, $options));
}
functions.save = __save;

fn __fsave($pixi_container, $stream, $format, $options)
{
    ret(fsave($pixi_container, $stream, $format, $options));
}
functions.fsave = __fsave;

fn __get_real_path($path)
{
    ret(get_real_path($path));
}
functions.get_real_path = __get_real_path;

fn __new_flist($path)
{
    ret(new_flist($path));
}
functions.new_flist = __new_flist;

fn __remove_flist($flist)
{
    ret(remove_flist($flist));
}
functions.remove_flist = __remove_flist;

fn __get_flist_name($flist)
{
    ret(get_flist_name($flist));
}
functions.get_flist_name = __get_flist_name;

fn __get_flist_type($flist)
{
    ret(get_flist_type($flist));
}
functions.get_flist_type = __get_flist_type;

fn __flist_next($flist)
{
    ret(flist_next($flist));
}
functions.flist_next = __flist_next;

fn __get_file_size($filename)
{
    ret(get_file_size($filename));
}
functions.get_file_size = __get_file_size;

fn __get_file_format($filename,$stream)
{
    ret(get_file_format($filename,$stream));
}
functions.get_file_format = __get_file_format;

fn __get_fformat_mime($fileformat)
{
    ret(get_fformat_mime($fileformat));
}
functions.get_fformat_mime = __get_fformat_mime;

fn __get_fformat_ext($fileformat)
{
    ret(get_fformat_ext($fileformat));
}
functions.get_fformat_ext = __get_fformat_ext;

fn __remove_file($filename)
{
    ret(remove_file($filename));
}
functions.remove_file = __remove_file;

fn __rename_file($old_name, $new_name)
{
    ret(rename_file($old_name, $new_name));
}
functions.rename_file = __rename_file;

fn __copy_file($old_name, $new_name)
{
    ret(copy_file($old_name, $new_name));
}
functions.copy_file = __copy_file;

fn __create_directory($path, $mode)
{
    ret(create_directory($path, $mode));
}
functions.create_directory = __create_directory;

fn __set_disk0($stream)
{
    ret(set_disk0($stream));
}
functions.set_disk0 = __set_disk0;

fn __get_disk0()
{
    ret(get_disk0());
}
functions.get_disk0 = __get_disk0;

fn __fopen($filename, $mode)
{
    ret(fopen($filename, $mode));
}
functions.fopen = __fopen;

fn __fopen_mem($data)
{
    ret(fopen_mem($data));
}
functions.fopen_mem = __fopen_mem;

fn __fclose($stream)
{
    ret(fclose($stream));
}
functions.fclose = __fclose;

fn __fputc($char, $stream)
{
    ret(fputc($char, $stream));
}
functions.fputc = __fputc;

fn __fputs($str, $stream)
{
    ret(fputs($str, $stream));
}
functions.fputs = __fputs;

fn __fwrite($data, $size, $stream, $data_offset_optional)
{
    ret(fwrite($data, $size, $stream, $data_offset_optional));
}
functions.fwrite = __fwrite;

fn __fgetc($stream)
{
    ret(fgetc($stream));
}
functions.fgetc = __fgetc;

fn __fgets($s, $n, $stream, $offset)
{
    ret(fgets($s, $n, $stream, $offset));
}
functions.fgets = __fgets;

fn __fread($data, $size, $stream, $data_offset_optional)
{
    ret(fread($data, $size, $stream, $data_offset_optional));
}
functions.fread = __fread;

fn __feof($stream)
{
    ret(feof($stream));
}
functions.feof = __feof;

fn __fflush($stream)
{
    ret(fflush($stream));
}
functions.fflush = __fflush;

fn __fseek($stream, $offset, $origin)
{
    ret(fseek($stream, $offset, $origin));
}
functions.fseek = __fseek;

fn __ftell($stream)
{
    ret(ftell($stream));
}
functions.ftell = __ftell;

fn __setxattr($path, $attr_name, $data, $data_size_in_bytes, $flags)
{
    ret(setxattr($path, $attr_name, $data, $data_size_in_bytes, $flags));
}
functions.setxattr = __setxattr;
// Graphics
fn __frame($delay, $x, $y, $sizex, $sizey)
{
    ret(frame($delay, $x, $y, $sizex, $sizey));
}
functions.frame = __frame;

fn __vsync($enable)
{
    ret(vsync($enable));
}
functions.vsync = __vsync;

fn __set_pixel_size($size)
{
    ret(set_pixel_size($size));
}
functions.set_pixel_size = __set_pixel_size;

fn __get_pixel_size()
{
    ret(get_pixel_size());
}
functions.get_pixel_size = __get_pixel_size;

fn __set_screen($pixi_container)
{
    ret(set_screen($pixi_container));
}
functions.set_screen = __set_screen;

fn __get_screen()
{
    ret(get_screen());
}
functions.get_screen = __get_screen;

fn __set_zbuf($pixi_container)
{
    ret(set_zbuf($pixi_container));
}
functions.set_zbuf = __set_zbuf;

fn __get_zbuf()
{
    ret(get_zbuf());
}
functions.get_zbuf = __get_zbuf;

fn __clear_zbuf()
{
    ret(clear_zbuf());
}
functions.clear_zbuf = __clear_zbuf;

fn __get_color($r,$g,$b)
{
    ret(get_color($r,$g,$b));
}
functions.get_color = __get_color;

fn __get_red($color)
{
    ret(get_red($color));
}
functions.get_red = __get_red;

fn __get_green($color)
{
    ret(get_green($color));
}
functions.get_green = __get_green;

fn __get_blue($color)
{
    ret(get_blue($color));
}
functions.get_blue = __get_blue;

fn __get_blend($color1, $color2, $v)
{
    ret(get_blend($color1, $color2, $v));
}
functions.get_blend = __get_blend;

fn __transp($transparency)
{
    ret(transp($transparency));
}
functions.transp = __transp;

fn __get_transp()
{
    ret(get_transp());
}
functions.get_transp = __get_transp;

fn __clear($color)
{
    ret(clear($color));
}
functions.clear = __clear;

fn __dot($x, $y, $color)
{
    ret(dot($x, $y, $color));
}
functions.dot = __dot;

fn __dot3d($x, $y, $z, $color)
{
    ret(dot3d($x, $y, $z, $color));
}
functions.dot3d = __dot3d;

fn __get_dot($x, $y)
{
    ret(get_dot($x, $y));
}
functions.get_dot = __get_dot;

fn __get_dot3d($x, $y, $z)
{
    ret(get_dot3d($x, $y, $z));
}
functions.get_dot3d = __get_dot3d;

fn __line($x1, $y1, $x2, $y2, $color)
{
    ret(line($x1, $y1, $x2, $y2, $color));
}
functions.line = __line;

fn __line3d($x1, $y1, $z1, $x2, $y2, $z2, $color)
{
    ret(line3d($x1, $y1, $z1, $x2, $y2, $z2, $color));
}
functions.line3d = __line3d;

fn __box($x1, $y1, $xsize, $ysize, $color)
{
    ret(box($x1, $y1, $xsize, $ysize, $color));
}
functions.box = __box;

fn __fbox($x, $y, $xsize, $ysize, $color)
{
    ret(fbox($x, $y, $xsize, $ysize, $color));
}
functions.fbox = __fbox;

//pixi_cont, x, y, color, xscale, yscale, src_x, src_y, src_xsize, src_ysize
fn __pixi($pixi_container, $x, $y, $color, $xscale, $yscale, $src_x, $src_y, $src_xsize, $src_ysize)
{
    ret(pixi($pixi_container, $x, $y, $color, $xscale, $yscale, $src_x, $src_y, $src_xsize, $src_ysize));
}
functions.pixi = __pixi;

fn __triangles3d($vertices, $triangles, $tnum)
{
    ret(triangles3d($vertices, $triangles, $tnum));
}
functions.triangles3d = __triangles3d;

fn __sort_triangles3d($vertices, $triangles, $tnum)
{
    ret(sort_triangles3d($vertices, $triangles, $tnum));
}
functions.sort_triangles3d = __sort_triangles3d;

fn __set_key_color($pixi_container, $color)
{
    ret(set_key_color($pixi_container, $color));
}
functions.set_key_color = __set_key_color;

fn __get_key_color()
{
    ret(get_key_color());
}
functions.get_key_color = __get_key_color;

fn __set_alpha($pixi_container, $alpha)
{
    ret(set_alpha($pixi_container, $alpha));
}
functions.set_alpha = __set_alpha;

fn __get_alpha($pixi_container)
{
    ret(get_alpha($pixi_container));
}
functions.get_alpha = __get_alpha;

fn __print($text, $x, $y, $color, $align, $max_xsize, $str_offset, $str_size)
{
    ret(print($text, $x, $y, $color, $align, $max_xsize, $str_offset, $str_size));
}
functions.print = __print;

fn __get_text_xsize($text, $align, $max_xsize, $str_offset, $str_size)
{
    ret(get_text_xsize($text, $align, $max_xsize, $str_offset, $str_size));
}
functions.get_text_xsize = __get_text_xsize;

fn __get_text_ysize($text, $align, $max_xsize, $str_offset, $str_size)
{
    ret(get_text_ysize($text, $align, $max_xsize, $str_offset, $str_size));
}
functions.get_text_ysize = __get_text_ysize;

fn __get_text_xysize($text, $align, $max_xsize, $str_offset, $str_size)
{
    ret(get_text_xysize($text, $align, $max_xsize, $str_offset, $str_size));
}
functions.get_text_xysize = __get_text_xysize;

fn __set_font($first_char_utf32, $font_image, $xchars, $ychars, $last_char, $char_xsize, $char_ysize, $char_xsize2, $char_ysize2, $grid_xoffset, $grid_yoffset, $grid_cell_xsize, $grid_cell_ysize)
{
    ret(set_font($first_char_utf32, $font_image, $xchars, $ychars, $last_char, $char_xsize, $char_ysize, $char_xsize2, $char_ysize2, $grid_xoffset, $grid_yoffset, $grid_cell_xsize, $grid_cell_ysize));
}
functions.set_font = __set_font;

fn __get_font($char_utf32)
{
    ret(get_font($char_utf32));
}
functions.get_font = __get_font;

fn __effector($type, $power, $color, $x, $y, $xsize, $ysize, $x_step, $y_step)
{
    ret(effector($type, $power, $color, $x, $y, $xsize, $ysize, $x_step, $y_step));
}
functions.effector = __effector;

fn __color_gradient($color1, $opacity1, $color2, $opacity2, $color3, $opacity3, $color4, $opacity4, $x, $y, $xsize, $ysize, $x_step, $y_step)
{
    ret(color_gradient($color1, $opacity1, $color2, $opacity2, $color3, $opacity3, $color4, $opacity4, $x, $y, $xsize, $ysize, $x_step, $y_step));
}
functions.color_gradient = __color_gradient;

fn __split_rgb($direction, $image, $red_channel, $green_channel, $blue_channel, $image_offset, $channel_offset, $size)
{
    ret(split_rgb($direction, $image, $red_channel, $green_channel, $blue_channel, $image_offset, $channel_offset, $size));
}
functions.split_rgb = __split_rgb;

fn __split_ycbcr($direction, $image, $y_channel, $cb_channel, $cr_channel, $image_offset, $channel_offset, $size)
{
    ret(split_ycbcr($direction, $image, $y_channel, $cb_channel, $cr_channel, $image_offset, $channel_offset, $size));
}
functions.split_ycbcr = __split_ycbcr;

// OpenGL base
fn __set_gl_callback($gl_callback, $user_data)
{
    ret(set_gl_callback($gl_callback, $user_data));
}
functions.set_gl_callback = __set_gl_callback;

fn __remove_gl_data($pixi_container)
{
    ret(remove_gl_data($pixi_container));
}
functions.remove_gl_data = __remove_gl_data;

fn __update_gl_data($pixi_container)
{
    ret(update_gl_data($pixi_container));
}
functions.update_gl_data = __update_gl_data;

fn __gl_draw_arrays($mode, $first, $count, $color_r, $color_g, $color_b, $color_a, $texture, $vertex_array, $color_array, $texcoord_array)
{
    ret(gl_draw_arrays($mode, $first, $count, $color_r, $color_g, $color_b, $color_a, $texture, $vertex_array, $color_array, $texcoord_array));
}
functions.gl_draw_arrays = __gl_draw_arrays;

fn __gl_blend_func($sfactor, $dfactor, $sfactor_alpha, $dfactor_alpha)
{
    ret(gl_blend_func($sfactor, $dfactor, $sfactor_alpha, $dfactor_alpha));
}
functions.gl_blend_func = __gl_blend_func;

fn __gl_bind_framebuffer($cnum, $flags, $x, $y, $width, $height)
{
    ret(gl_bind_framebuffer($cnum, $flags, $x, $y, $width, $height));
}
functions.gl_bind_framebuffer = __gl_bind_framebuffer;

fn __gl_bind_texture($cnum, $texture_unit)
{
    ret(gl_bind_texture($cnum, $texture_unit));
}
functions.gl_bind_texture = __gl_bind_texture;

fn __gl_get_int($pname)
{
    ret(gl_get_int($pname));
}
functions.gl_get_int = __gl_get_int;

fn __gl_get_float($pname)
{
    ret(gl_get_float($pname));
}
functions.gl_get_float = __gl_get_float;

// OpenGL shaders
fn __gl_new_prog($vertex_shader, $fragment_shader)
{
    ret(gl_new_prog($vertex_shader, $fragment_shader));
}
functions.gl_new_prog = __gl_new_prog;

fn __gl_use_prog($prog)
{
    ret(gl_use_prog($prog));
}
functions.gl_use_prog = __gl_use_prog;

fn __gl_uniform($var_location, $v0, $v1, $v2, $v3)
{
    ret(gl_uniform($var_location, $v0, $v1, $v2, $v3));
}
functions.gl_uniform = __gl_uniform;

fn __gl_uniform_matrix($size, $matrix_location, $transpose, $matrix)
{
    ret(gl_uniform_matrix());
}
functions.gl_uniform_matrix = __gl_uniform_matrix;

// Animation
fn __pack_frame($pixi_container)
{
    ret(pack_frame($pixi_container));
}
functions.pack_frame = __pack_frame;

fn __unpack_frame($pixi_container)
{
    ret(unpack_frame($pixi_container));
}
functions.unpack_frame = __unpack_frame;

fn __create_anim($pixi_container)
{
    ret(create_anim($pixi_container));
}
functions.create_anim = __create_anim;

fn __remove_anim($pixi_container)
{
    ret(remove_anim($pixi_container));
}
functions.remove_anim = __remove_anim;

fn __clone_frame($pixi_container)
{
    ret(clone_frame($pixi_container));
}
functions.clone_frame = __clone_frame;

fn __remove_frame($pixi_container)
{
    ret(remove_frame($pixi_container));
}
functions.remove_frame = __remove_frame;

fn __play($pixi_container)
{
    ret(play($pixi_container));
}
functions.play = __play;

fn __stop($pixi_container)
{
    ret(stop($pixi_container));
}
functions.stop = __stop;

// Transformation
fn __t_reset()
{
    ret(t_reset());
}
functions.t_reset = __t_reset;

fn __t_rotate($angle, $axis_x, $axis_y, $axis_z)
{
    ret(t_rotate($angle, $axis_x, $axis_y, $axis_z));
}
functions.t_rotate = __t_rotate;

fn __t_translate($x, $y, $z)
{
    ret(t_translate($x, $y, $z));
}
functions.t_translate = __t_translate;

fn __t_scale($x, $y, $z)
{
    ret(t_scale($x, $y, $z));
}
functions.t_scale = __t_scale;

fn __t_push_matrix()
{
    ret(t_push_matrix());
}
functions.t_push_matrix = __t_push_matrix;

fn __t_pop_matrix()
{
    ret(t_pop_matrix());
}
functions.t_pop_matrix = __t_pop_matrix;

fn __t_get_matrix($matrix)
{
    ret(t_get_matrix($matrix));
}
functions.t_get_matrix = __t_get_matrix;

fn __t_set_matrix($matrix)
{
    ret(t_set_matrix($matrix));
}
functions.t_set_matrix = __t_set_matrix;

fn __t_mul_matrix($matrix)
{
    ret(t_mul_matrix());
}
functions.t_mul_matrix = __t_mul_matrix;

fn __t_point($float_array_vec3)
{
    ret(t_point($float_array_vec3));
}
functions.t_point = __t_point;

// Audio
fn __set_audio_callback($callback, $userdata, $sample_rate, $format, $channels, $flags)
{
    ret(set_audio_callback($callback, $userdata, $sample_rate, $format, $channels, $flags));
}
functions.set_audio_callback = __set_audio_callback;

fn __get_audio_sample_rate($source)
{
    ret(get_audio_sample_rate($source));
}
functions.get_audio_sample_rate = __get_audio_sample_rate;

fn __enable_audio_input($disable_enable)
{
    ret(enable_audio_input($disable_enable));
}
functions.enable_audio_input = __enable_audio_input;

fn __get_note_freq($note, $finetune)
{
    ret(get_note_freq($note, $finetune));
}
functions.get_note_freq = __get_note_freq;

// MIDI
fn __midi_open_client($client_name)
{
    ret(midi_open_client($client_name));
}
functions.midi_open_client = __midi_open_client;

fn __midi_close_client($client_id)
{
    ret(midi_close_client($client_id));
}
functions.midi_close_client = __midi_close_client;

fn __midi_get_device($client_id, $device_num, $flags)
{
    ret(midi_get_device($client_id, $device_num, $flags));
}
functions.midi_get_device = __midi_get_device;

fn __midi_open_port($client_id, $port_name, $device_name, $flags)
{
    ret(midi_open_port($client_id, $port_name, $device_name, $flags));
}
functions.midi_open_port = __midi_open_port;

fn __midi_reopen_port($client_id, $port_id)
{
    ret(midi_reopen_port($client_id, $port_id));
}
functions.midi_reopen_port = __midi_reopen_port;

fn __midi_close_port($client_id, $port_id)
{
    ret(midi_close_port($client_id, $port_id));
}
functions.midi_close_port = __midi_close_port;

fn __midi_get_event($client_id, $port_id, $cont)
{
    ret(midi_get_event($client_id, $port_id, $cont));
}
functions.midi_get_event = __midi_get_event;

fn __midi_get_event_time($client_id, $port_id)
{
    ret(midi_get_event_time($client_id, $port_id));
}
functions.midi_get_event_time = __midi_get_event_time;

fn __midi_next_event($client_id, $port_id)
{
    ret(midi_next_event($client_id, $port_id));
}
functions.midi_next_event = __midi_next_event;

fn __midi_send_event($client_id, $port_id, $data_cont, $data_size, $t )
{
    ret(midi_send_event($client_id, $port_id, $data_cont, $data_size, $t));
}
functions.midi_send_event = __midi_send_event;

// SunVox
    // Main

    //NOT FOR PIXILANG
    /*fn __sv_load_dll()
    {
        ret(sv_load_dll());
    }
    functions.sv_load_dll = __sv_load_dll;

    fn __sv_unload_dll()
    {
        ret(sv_unload_dll());
    }
    functions.sv_unload_dll = __sv_unload_dll;

    fn __sv_init()
    {
        ret(sv_init());
    }
    functions.sv_init = __sv_init;

    fn __sv_deinit()
    {
        ret(sv_deinit());
    }
    functions.sv_deinit = __sv_deinit;
    */

    fn __sv_new($sample_rate, $flags)
    {
        ret(sv_new($sample_rate, $flags));
    }
    functions.sv_new = __sv_new;

    fn __sv_remove($sv)
    {
        ret(sv_remove($sv));
    }
    functions.sv_remove = __sv_remove;

    fn __sv_get_sample_rate($sv)
    {
        ret(sv_get_sample_rate($sv));
    }
    functions.sv_get_sample_rate = __sv_get_sample_rate;

    // NOT FOR PIXILANG
    /*
    fn __sv_update_input()
    {
        ret(sv_update_input());
    }
    functions.sv_update_input = __sv_update_input;

    fn __sv_audio_callback()
    {
        ret(sv_audio_callback());
    }
    functions.sv_audio_callback = __sv_audio_callback;

    fn __sv_audio_callback2()
    {
        ret(sv_audio_callback2());
    }
    functions.sv_audio_callback2 = __sv_audio_callback2;
    */

    fn __sv_render($sv, $buf, $frames, $latency, $out_time, $in_buf, $in_channels)
    {
        ret(sv_render($sv, $buf, $frames, $latency, $out_time, $in_buf, $in_channels));
    }
    functions.sv_render = __sv_render;

    // NOT FOR PIXILANG
    /*
    fn __sv_open_slot()
    {
        ret(sv_open_slot());
    }
    functions.sv_open_slot = __sv_open_slot;

    fn __sv_close_slot()
    {
        ret(sv_close_slot());
    }
    functions.sv_close_slot = __sv_close_slot;
    
    fn __sv_lock_slot()
    {
        ret(sv_lock_slot());
    }
    functions.sv_lock_slot = __sv_lock_slot;

    fn __sv_unlock_slot()
    {
        ret(sv_unlock_slot());
    }
    functions.sv_unlock_slot = __sv_unlock_slot;
    */

    fn __sv_lock($sv)
    {
        ret(sv_lock($sv));
    }
    functions.sv_lock = __sv_lock;

    fn __sv_unlock($sv)
    {
        ret(sv_unlock($sv));
    }
    functions.sv_unlock = __sv_unlock;

    // Project file
    fn __sv_load($sv, $filename)
    {
        ret(sv_load($sv, $filename));
    }
    functions.sv_load = __sv_load;
    
    // NOT FOR PIXILANG
    /*
    fn __sv_load_from_memory()
    {
        ret(sv_load_from_memory());
    }
    functions.sv_load_from_memory = __sv_load_from_memory;
    */

    fn __sv_fload($sv, $f)
    {
        ret(sv_fload($sv, $f));
    }
    functions.sv_fload = __sv_fload;

    fn __sv_save($sv, $filename)
    {
        ret(sv_save($sv, $filename));
    }
    functions.sv_save = __sv_save;

    fn __sv_fsave($sv, $f)
    {
        ret(sv_fsave($sv, $f));
    }
    functions.sv_fsave = __sv_fsave;

    // Project playback
    fn __sv_play($sv, $line_num)
    {
        ret(sv_play($sv, $line_num));
    }
    functions.sv_play = __sv_play;
    
    // NOT FOR PIXILANG
    /*
    fn __sv_play_from_beginning()
    {
        ret(sv_play_from_beginning());
    }
    functions.sv_play_from_beginning = __sv_play_from_beginning;
    */

    fn __sv_stop($sv)
    {
        ret(sv_stop($sv));
    }
    functions.sv_stop = __sv_stop;

    fn __sv_pause($sv)
    {
        ret(sv_pause($sv));
    }
    functions.sv_pause = __sv_pause;

    fn __sv_resume($sv)
    {
        ret(sv_resume($sv));
    }
    functions.sv_resume = __sv_resume;

    fn __sv_sync_resume($sv)
    {
        ret(sv_sync_resume($sv));
    }
    functions.sv_sync_resume = __sv_sync_resume;

    fn __sv_set_autostop($sv,$autostop)
    {
        ret(sv_set_autostop($sv,$autostop));
    }
    functions.sv_set_autostop = __sv_set_autostop;

    fn __sv_get_autostop($sv)
    {
        ret(sv_get_autostop($sv));
    }
    functions.sv_get_autostop = __sv_get_autostop;
    
    // NOT FOR PIXILANG
    /*
    fn __sv_end_of_song()
    {
        ret(sv_end_of_song());
    }
    functions.sv_end_of_song = __sv_end_of_song;
    */

    fn __sv_get_status($sv)
    {
        ret(sv_get_status($sv));
    }
    functions.sv_get_status = __sv_get_status;

    fn __sv_rewind($sv, $line_num)
    {
        ret(sv_rewind($sv, $line_num));
    }
    functions.sv_rewind = __sv_rewind;

    fn __sv_volume($sv, $vol)
    {
        ret(sv_volume($sv, $vol));
    }
    functions.sv_volume = __sv_volume;

    fn __sv_get_current_line($sv)
    {
        ret(sv_get_current_line($sv));
    }
    functions.sv_get_current_line = __sv_get_current_line;

    fn __sv_get_current_line2($sv)
    {
        ret(sv_get_current_line2($sv));
    }
    functions.sv_get_current_line2 = __sv_get_current_line2;

    fn __sv_get_current_signal_level($sv, $channel)
    {
        ret(sv_get_current_signal_level($sv, $channel));
    }
    functions.sv_get_current_signal_level = __sv_get_current_signal_level;

    // Project info

    // NOT FOR PIXILANG
    /*
    fn __sv_get_song_name()
    {
        ret(sv_get_song_name());
    }
    functions.sv_get_song_name = __sv_get_song_name;
    */

    fn __sv_get_name($sv)
    {
        ret(sv_get_name($sv));
    }
    functions.sv_get_name = __sv_get_name;

    // NOT FOR PIXILANG
    /*
    fn __sv_set_song_name()
    {
        ret(sv_set_song_name());
    }
    functions.sv_set_song_name = __sv_set_song_name;
    */

    fn __sv_set_name($sv, $name)
    {
        ret(sv_set_name($sv, $name));
    }
    functions.sv_set_name = __sv_set_name;

    // NOT FOR PIXILANG
    /*
    fn __sv_get_song_bpm()
    {
        ret(sv_get_song_bpm());
    }
    functions.sv_get_song_bpm = __sv_get_song_bpm;

    fn __sv_get_song_tpl()
    {
        ret(sv_get_song_tpl());
    }
    functions.sv_get_song_tpl = __sv_get_song_tpl;
    */

    fn __sv_get_bpm($sv)
    {
        ret(sv_get_bpm($sv));
    }
    functions.sv_get_bpm = __sv_get_bpm;

    fn __sv_get_tpl($sv)
    {
        ret(sv_get_tpl($sv));
    }
    functions.sv_get_tpl = __sv_get_tpl;

    // NOT FOR PIXILANG
    /*
    fn __sv_get_song_length_frames()
    {
        ret(sv_get_song_length_frames());
    }
    functions.sv_get_song_length_frames = __sv_get_song_length_frames;

    fn __sv_get_song_length_lines()
    {
        ret(sv_get_song_length_lines());
    }
    functions.sv_get_song_length_lines = __sv_get_song_length_lines;
    */

    fn __sv_get_length_frames($sv)
    {
        ret(sv_get_length_frames($sv));
    }
    functions.sv_get_length_frames = __sv_get_length_frames;

    fn __sv_get_length_lines($sv)
    {
        ret(sv_get_length_lines($sv));
    }
    functions.sv_get_length_lines = __sv_get_length_lines;

    fn __sv_get_time_map($sv, $start_line, $len, $dest, $flags)
    {
        ret(sv_get_time_map($sv, $start_line, $len, $dest, $flags));
    }
    functions.sv_get_time_map = __sv_get_time_map;

    // Events
    fn __sv_set_event_t($sv, $set, $t)
    {
        ret(sv_set_event_t($sv, $set, $t));
    }
    functions.sv_set_event_t = __sv_set_event_t;

    fn __sv_send_event($sv, $track_num, $note, $vel, $module, $ctl, $ctl_val)
    {
        ret(sv_send_event($sv, $track_num, $note, $vel, $module, $ctl, $ctl_val));
    }
    functions.sv_send_event = __sv_send_event;

    // Modules
    fn __sv_new_module($sv, $type, $name, $x, $y, $z)
    {
        ret(sv_new_module($sv, $type, $name, $x, $y, $z));
    }
    functions.sv_new_module = __sv_new_module;

    fn __sv_remove_module($sv, $mod_num)
    {
        ret(sv_remove_module($sv, $mod_num));
    }
    functions.sv_remove_module = __sv_remove_module;

    fn __sv_connect_module($sv, $source, $destination)
    {
        ret(sv_connect_module($sv, $source, $destination));
    }
    functions.sv_connect_module = __sv_connect_module;

    fn __sv_disconnect_module($sv, $source, $destination)
    {
        ret(sv_disconnect_module($sv, $source, $destination));
    }
    functions.sv_disconnect_module = __sv_disconnect_module;

    fn __sv_load_module($sv, $filename, $x, $y, $z)
    {
        ret(sv_load_module($sv, $filename, $x, $y, $z));
    }
    functions.sv_load_module = __sv_load_module;

    // NOT FOR PIXILANG
    /*
    fn __sv_load_module_from_memory()
    {
        ret(sv_load_module_from_memory());
    }
    functions.sv_load_module_from_memory = __sv_load_module_from_memory;
    */

    fn __sv_fload_module($sv, $f, $x, $y, $z)
    {
        ret(sv_fload_module($sv, $f, $x, $y, $z));
    }
    functions.sv_fload_module = __sv_fload_module;

    fn __sv_sampler_load($sv, $mod_num, $filename, $sample_slot)
    {
        ret(sv_sampler_load($sv, $mod_num, $filename, $sample_slot));
    }
    functions.sv_sampler_load = __sv_sampler_load;

    // NOT FOR PIXILANG
    /*
    fn __sv_sampler_load_from_memory()
    {
        ret(sv_sampler_load_from_memory());
    }
    functions.sv_sampler_load_from_memory = __sv_sampler_load_from_memory;
    */

    fn __sv_sampler_fload($sv, $mod_num, $f, $sample_slot)
    {
        ret(sv_sampler_fload($sv, $mod_num, $f, $sample_slot));
    }
    functions.sv_sampler_fload = __sv_sampler_fload;

    fn __sv_metamodule_load($sv, $mod_num, $filename)
    {
        ret(sv_metamodule_load($sv, $mod_num, $filename));
    }
    functions.sv_metamodule_load = __sv_metamodule_load;

    // NOT FOR PIXILANG
    /*
    fn __sv_metamodule_load_from_memory()
    {
        ret(sv_metamodule_load_from_memory());
    }
    functions.sv_metamodule_load_from_memory = __sv_metamodule_load_from_memory;
    */

    fn __sv_metamodule_fload($sv, $mod_num, $f)
    {
        ret(sv_metamodule_fload($sv, $mod_num, $f));
    }
    functions.sv_metamodule_fload = __sv_metamodule_fload;

    fn __sv_vplayer_load($sv, $mod_num, $filename)
    {
        ret(sv_vplayer_load($sv, $mod_num, $filename));
    }
    functions.sv_vplayer_load = __sv_vplayer_load;
    
    // NOT FOR PIXILANG
    /*
    fn __sv_vplayer_load_from_memory()
    {
        ret(sv_vplayer_load_from_memory());
    }
    functions.sv_vplayer_load_from_memory = __sv_vplayer_load_from_memory;
    */

    fn __sv_vplayer_fload($sv, $mod_num, $f)
    {
        ret(sv_vplayer_fload($sv, $mod_num, $f));
    }
    functions.sv_vplayer_fload = __sv_vplayer_fload;

    fn __sv_get_number_of_modules($sv)
    {
        ret(sv_get_number_of_modules($sv));
    }
    functions.sv_get_number_of_modules = __sv_get_number_of_modules;

    fn __sv_find_module($sv, $name)
    {
        ret(sv_find_module($sv,$name));
    }
    functions.sv_find_module = __sv_find_module;

    fn __sv_get_module_flags($sv,$mod_num)
    {
        ret(sv_get_module_flags($sv,$mod_num));
    }
    functions.sv_get_module_flags = __sv_get_module_flags;

    fn __sv_get_module_inputs($sv,$mod_num)
    {
        ret(sv_get_module_inputs($sv,$mod_num));
    }
    functions.sv_get_module_inputs = __sv_get_module_inputs;

    fn __sv_get_module_outputs($sv,$mod_num)
    {
        ret(sv_get_module_outputs($sv,$mod_num));
    }
    functions.sv_get_module_outputs = __sv_get_module_outputs;

    fn __sv_get_module_type($sv,$mod_num)
    {
        ret(sv_get_module_type($sv,$mod_num));
    }
    functions.sv_get_module_type = __sv_get_module_type;

    fn __sv_get_module_name($sv,$mod_num)
    {
        ret(sv_get_module_name($sv,$mod_num));
    }
    functions.sv_get_module_name = __sv_get_module_name;

    fn __sv_set_module_name($sv,$mod_num, $name)
    {
        ret(sv_set_module_name($sv,$mod_num, $name));
    }
    functions.sv_set_module_name = __sv_set_module_name;

    fn __sv_get_module_xy($sv,$mod_num)
    {
        ret(sv_get_module_xy($sv,$mod_num));
    }
    functions.sv_get_module_xy = __sv_get_module_xy;

    fn __sv_set_module_xy($sv,$mod_num, $x, $y)
    {
        ret(sv_set_module_xy($sv,$mod_num, $x, $y));
    }
    functions.sv_set_module_xy = __sv_set_module_xy;

    fn __sv_get_module_color($sv,$mod_num)
    {
        ret(sv_get_module_color($sv,$mod_num));
    }
    functions.sv_get_module_color = __sv_get_module_color;

    fn __sv_set_module_color($sv,$mod_num, $color)
    {
        ret(sv_set_module_color($sv,$mod_num, $color));
    }
    functions.sv_set_module_color = __sv_set_module_color;

    fn __sv_get_module_finetune($sv,$mod_num)
    {
        ret(sv_get_module_finetune($sv,$mod_num));
    }
    functions.sv_get_module_finetune = __sv_get_module_finetune;

    fn __sv_set_module_finetune($sv,$mod_num, $finetune)
    {
        ret(sv_set_module_finetune($sv,$mod_num, $finetune));
    }
    functions.sv_set_module_finetune = __sv_set_module_finetune;

    fn __sv_set_module_relnote($sv,$mod_num, $relative_note)
    {
        ret(sv_set_module_relnote($sv,$mod_num, $relative_note));
    }
    functions.sv_set_module_relnote = __sv_set_module_relnote;

    // NOT FOR PIXILANG
    /*
    fn __sv_get_module_scope2()
    {
        ret(sv_get_module_scope2());
    }
    functions.sv_get_module_scope2 = __sv_get_module_scope2;
    */

    fn __sv_get_module_scope($sv, $mod_num, $channel, $dest_buf, $samples_to_read)
    {
        ret(sv_get_module_scope($sv, $mod_num, $channel, $dest_buf, $samples_to_read));
    }
    functions.sv_get_module_scope = __sv_get_module_scope;

    fn __sv_module_curve($sv, $mod_num, $curve_num, $data, $len, $w)
    {
        ret(sv_module_curve($sv, $mod_num, $curve_num, $data, $len, $w));
    }
    functions.sv_module_curve = __sv_module_curve;

    fn __sv_get_number_of_module_ctls($sv, $mod_num)
    {
        ret(sv_get_number_of_module_ctls($sv, $mod_num));
    }
    functions.sv_get_number_of_module_ctls = __sv_get_number_of_module_ctls;

    fn __sv_get_module_ctl_name($sv, $mod_num, $ctl_num)
    {
        ret(sv_get_module_ctl_name($sv, $mod_num, $ctl_num));
    }
    functions.sv_get_module_ctl_name = __sv_get_module_ctl_name;

    fn __sv_get_module_ctl_value($sv, $mod_num, $ctl_num, $scaled)
    {
        ret(sv_get_module_ctl_value($sv, $mod_num, $ctl_num, $scaled));
    }
    functions.sv_get_module_ctl_value = __sv_get_module_ctl_value;

    fn __sv_set_module_ctl_value($sv, $mod_num, $ctl_num, $val, $scaled)
    {
        ret(sv_set_module_ctl_value($sv, $mod_num, $ctl_num, $val, $scaled));
    }
    functions.sv_set_module_ctl_value = __sv_set_module_ctl_value;

    fn __sv_get_module_ctl_min($sv, $mod_num, $ctl_num, $scaled)
    {
        ret(sv_get_module_ctl_min($sv, $mod_num, $ctl_num, $scaled));
    }
    functions.sv_get_module_ctl_min = __sv_get_module_ctl_min;

    fn __sv_get_module_ctl_max($sv, $mod_num, $ctl_num, $scaled)
    {
        ret(sv_get_module_ctl_max($sv, $mod_num, $ctl_num, $scaled));
    }
    functions.sv_get_module_ctl_max = __sv_get_module_ctl_max;

    fn __sv_get_module_ctl_offset($sv, $mod_num, $ctl_num)
    {
        ret(sv_get_module_ctl_offset($sv, $mod_num, $ctl_num));
    }
    functions.sv_get_module_ctl_offset = __sv_get_module_ctl_offset;

    fn __sv_get_module_ctl_type($sv, $mod_num, $ctl_num)
    {
        ret(sv_get_module_ctl_type($sv, $mod_num, $ctl_num));
    }
    functions.sv_get_module_ctl_type = __sv_get_module_ctl_type;

    fn __sv_get_module_ctl_group($sv, $mod_num, $ctl_num)
    {
        ret(sv_get_module_ctl_group($sv, $mod_num, $ctl_num));
    }
    functions.sv_get_module_ctl_group = __sv_get_module_ctl_group;

    // Patterns
    fn __sv_new_pattern($sv, $clone, $x, $y, $tracks, $lines, $icon_seed, $name)
    {
        ret(sv_new_pattern($sv, $clone, $x, $y, $tracks, $lines, $icon_seed, $name));
    }
    functions.sv_new_pattern = __sv_new_pattern;

    fn __sv_remove_pattern($sv, $pat_num)
    {
        ret(sv_remove_pattern($sv, $pat_num));
    }
    functions.sv_remove_pattern = __sv_remove_pattern;

    fn __sv_get_number_of_patterns($sv)
    {
        ret(sv_get_number_of_patterns($sv));
    }
    functions.sv_get_number_of_patterns = __sv_get_number_of_patterns;

    fn __sv_find_pattern($sv, $name)
    {
        ret(sv_find_pattern($sv, $name));
    }
    functions.sv_find_pattern = __sv_find_pattern;

    fn __sv_get_pattern_x($sv, $pat_num)
    {
        ret(sv_get_pattern_x($sv, $pat_num));
    }
    functions.sv_get_pattern_x = __sv_get_pattern_x;

    fn __sv_get_pattern_y($sv, $pat_num)
    {
        ret(sv_get_pattern_y($sv, $pat_num));
    }
    functions.sv_get_pattern_y = __sv_get_pattern_y;

    fn __sv_set_pattern_xy($sv, $pat_num, $x, $y)
    {
        ret(sv_set_pattern_xy($sv, $pat_num, $x, $y));
    }
    functions.sv_set_pattern_xy = __sv_set_pattern_xy;

    fn __sv_get_pattern_tracks($sv, $pat_num)
    {
        ret(sv_get_pattern_tracks($sv, $pat_num));
    }
    functions.sv_get_pattern_tracks = __sv_get_pattern_tracks;

    fn __sv_get_pattern_lines($sv, $pat_num)
    {
        ret(sv_get_pattern_lines($sv, $pat_num));
    }
    functions.sv_get_pattern_lines = __sv_get_pattern_lines;

    fn __sv_set_pattern_size($sv, $pat_num, $tracks, $lines)
    {
        ret(sv_set_pattern_size($sv, $pat_num, $tracks, $lines));
    }
    functions.sv_set_pattern_size = __sv_set_pattern_size;

    fn __sv_get_pattern_name($sv, $pat_num)
    {
        ret(sv_get_pattern_name($sv, $pat_num));
    }
    functions.sv_get_pattern_name = __sv_get_pattern_name;

    fn __sv_set_pattern_name($sv, $pat_num, $name)
    {
        ret(sv_set_pattern_name($sv, $pat_num, $name));
    }
    functions.sv_set_pattern_name = __sv_set_pattern_name;

    fn __sv_get_pattern_data($sv, $pat_num)
    {
        ret(sv_get_pattern_data($sv, $pat_num));
    }
    functions.sv_get_pattern_data = __sv_get_pattern_data;

    // NOT FOR PIXILANG
    /*
    fn __sv_set_pattern_data()
    {
        ret(sv_set_pattern_data());
    }
    functions.sv_set_pattern_data = __sv_set_pattern_data;
    */

    fn __sv_set_pattern_event($sv, $pat, $track, $line, $nn, $vv, $mm, $ccee, $xxyy )
    {
        ret(sv_set_pattern_event($sv, $pat, $track, $line, $nn, $vv, $mm, $ccee, $xxyy));
    }
    functions.sv_set_pattern_event = __sv_set_pattern_event;

    fn __sv_get_pattern_event($sv, $pat, $track, $line, $column)
    {
        ret(sv_get_pattern_event($sv, $pat, $track, $line, $column));
    }
    functions.sv_get_pattern_event = __sv_get_pattern_event;

    fn __sv_pattern_mute($sv, $pat, $mute)
    {
        ret(sv_pattern_mute($sv, $pat, $mute));
    }
    functions.sv_pattern_mute = __sv_pattern_mute;

    // NOT FOR PIXILANG
    /*
    // Other
    fn __sv_get_ticks()
    {
        ret(sv_get_ticks());
    }
    functions.sv_get_ticks = __sv_get_ticks;

    fn __sv_get_ticks_per_second()
    {
        ret(sv_get_ticks_per_second());
    }
    functions.sv_get_ticks_per_second = __sv_get_ticks_per_second;

    fn __sv_get_log()
    {
        ret(sv_get_log());
    }
    functions.sv_get_log = __sv_get_log;
    */

// Time
fn __start_timer($timer_num)
{
    ret(start_timer($timer_num));
}
functions.start_timer = __start_timer;

fn __get_timer($timer_num)
{
    ret(get_timer($timer_num));
}
functions.get_timer = __get_timer;

fn __get_year()
{
    ret(get_year());
}
functions.get_year = __get_year;

fn __get_month()
{
    ret(get_month());
}
functions.get_month = __get_month;

fn __get_day()
{
    ret(get_day());
}
functions.get_day = __get_day;

fn __get_hours()
{
    ret(get_hours());
}
functions.get_hours = __get_hours;

fn __get_minutes()
{
    ret(get_minutes());
}
functions.get_minutes = __get_minutes;

fn __get_seconds()
{
    ret(get_seconds());
}
functions.get_seconds = __get_seconds;

fn __get_ticks()
{
    ret(get_ticks());
}
functions.get_ticks = __get_ticks;

fn __get_tps()
{
    ret(get_tps());
}
functions.get_tps = __get_tps;

fn __sleep($ms)
{
    ret(sleep($ms));
}
functions.sleep = __sleep;

// Events
fn __get_event()
{
    ret(get_event());
}
functions.get_event = __get_event;

fn __set_quit_action($action)
{
    ret(set_quit_action($action));
}
functions.set_quit_action = __set_quit_action;

// Threads
fn __thread_create($thread_func, $user_data, $flags)
{
    ret(thread_create($thread_func, $user_data, $flags));
}
functions.thread_create = __thread_create;

fn __thread_destroy($thread_id, $timeout_ms)
{
    ret(thread_destroy($thread_id, $timeout_ms));
}
functions.thread_destroy = __thread_destroy;

fn __mutex_create()
{
    ret(mutex_create());
}
functions.mutex_create = __mutex_create;

fn __mutex_destroy($mutex)
{
    ret(mutex_destroy($mutex));
}
functions.mutex_destroy = __mutex_destroy;

fn __mutex_lock($mutex)
{
    ret(mutex_lock($mutex));
}
functions.mutex_lock = __mutex_lock;

fn __mutex_trylock($mutex)
{
    ret(mutex_trylock($mutex));
}
functions.mutex_trylock = __mutex_trylock;

fn __mutex_unlock($mutex)
{
    ret(mutex_unlock($mutex));
}
functions.mutex_unlock = __mutex_unlock;

// Mathematical
fn __acos($x)
{
    ret(acos($x));
}
functions.acos = __acos;

fn __acosh($x)
{
    ret(acosh($x));
}
functions.acosh = __acosh;

fn __asin($x)
{
    ret(asin($x));
}
functions.asin = __asin;

fn __asinh($x)
{
    ret(asinh($x));
}
functions.asinh = __asinh;

fn __atan($x)
{
    ret(atan($x));
}
functions.atan = __atan;

fn __atan2($x,$y)
{
    ret(atan2($x,$y));
}
functions.atan2 = __atan2;

fn __atanh($x)
{
    ret(atanh($x));
}
functions.atanh = __atanh;

fn __ceil($x)
{
    ret(ceil($x));
}
functions.ceil = __ceil;

fn __cos($x)
{
    ret(cos($x));
}
functions.cos = __cos;

fn __cosh($x)
{
    ret(cosh($x));
}
functions.cosh = __cosh;

fn __exp($x)
{
    ret(exp($x));
}
functions.exp = __exp;

fn __exp2($x)
{
    ret(exp2($x));
}
functions.exp2 = __exp2;

fn __expm1($x)
{
    ret(expm1($x));
}
functions.expm1 = __expm1;

fn __abs($x)
{
    ret(abs($x));
}
functions.abs = __abs;

fn __floor($x)
{
    ret(floor($x));
}
functions.floor = __floor;

fn __mod($x,$y)
{
    ret(mod($x,$y));
}
functions.mod = __mod;

fn __log($x)
{
    ret(log($x));
}
functions.log = __log;

fn __log2($x)
{
    ret(log2($x));
}
functions.log2 = __log2;

fn __log10($x)
{
    ret(log10($x));
}
functions.log10 = __log10;

fn __pow($x,$y)
{
    ret(pow($x,$y));
}
functions.pow = __pow;

fn __sin($x)
{
    ret(sin($x));
}
functions.sin = __sin;

fn __sinh($x)
{
    ret(sinh($x));
}
functions.sinh = __sinh;

fn __sqrt($x)
{
    ret(sqrt($x));
}
functions.sqrt = __sqrt;

fn __tan($x)
{
    ret(tan($x));
}
functions.tan = __tan;

fn __tanh($x)
{
    ret(tanh($x));
}
functions.tanh = __tanh;

fn __rand()
{
    ret(rand());
}
functions.rand = __rand;

fn __rand_seed($x)
{
    ret(rand_seed($x));
}
functions.rand_seed = __rand_seed;

// Type punning
//value, mode, intermediate_value_bits 
fn __reinterpret_type($value, $mode, $intermediate_value_bits)
{
    ret(reinterpret_type($value, $mode, $intermediate_value_bits));
}
functions.reinterpret_type = __reinterpret_type;

// Data processing
fn __op_cn($opcode, $C1, $N)
{
    ret(op_cn($opcode, $C1, $N));
}
functions.op_cn = __op_cn;

fn __op_cn1($opcode, $C1, $N, $x , $xsize)
{
    ret(op_cn($opcode, $C1, $N, $x , $xsize));
}
functions.op_cn_ = __op_cn1;


fn __op_cn2($opcode, $C1, $N, $x, $y, $xsize, $ysize)
{
    ret(op_cn($opcode, $C1, $N, $x, $y, $xsize, $ysize));
}
functions.op_cn2 = __op_cn2;

fn __op_cc($opcode, $C1, $C2)
{
    ret(op_cc($opcode, $C1, $C2));
}
functions.op_cc = __op_cc;

fn __op_cc1($opcode, $C1, $C2, $dest_x, $src_x, $xsize)
{
    ret(op_cc($opcode, $C1, $C2, $dest_x, $src_x, $xsize));
}
functions.op_cc1 = __op_cc1;

fn __op_cc2($opcode, $C1, $C2, $dest_x, $dest_y, $src_x, $src_y, $xsize, $ysize)
{
    ret(op_cc($opcode, $C1, $C2, $dest_x, $dest_y, $src_x, $src_y, $xsize, $ysize));
}
functions.op_cc2 = __op_cc2;

fn __op_ccn($opcode, $C1, $C2, $N)
{
    ret(op_ccn($opcode, $C1, $C2, $N));
}
functions.op_ccn = __op_ccn;

fn __op_ccn1($opcode, $C1, $C2, $N, $dest_x, $src_x, $xsize)
{
    ret(op_ccn($opcode, $C1, $C2, $N, $dest_x, $src_x, $xsize));
}
functions.op_ccn1 = __op_ccn1;

fn __op_ccn2($opcode, $C1, $C2, $N, $dest_x, $dest_y, $src_x, $src_y, $xsize, $ysize)
{
    ret(op_ccn($opcode, $C1, $C2, $N, $dest_x, $dest_y, $src_x, $src_y, $xsize, $ysize));
}
functions.op_ccn2 = __op_ccn2;

fn __generator($opcode, $pixi, $phase, $amplitude, $delta_x, $delta_y, $x, $y, $xsize, $ysize)
{
    ret(generator($opcode, $pixi, $phase, $amplitude, $delta_x, $delta_y, $x, $y, $xsize, $ysize));
}
functions.generator = __generator;

fn __wavetable_generator($dest, $dest_offset, $dest_length, $table, $amp, $amp_delta, $pos, $pos_delta, $gen_offset, $gen_step, $gen_count)
{
    ret(wavetable_generator($dest, $dest_offset, $dest_length, $table, $amp, $amp_delta, $pos, $pos_delta, $gen_offset, $gen_step, $gen_count));
}
functions.wavetable_generator = __wavetable_generator;

fn __sampler($sample_info)
{
    ret(sampler($sample_info));
}
functions.sampler = __sampler;

fn __envelope2p($data_cont, $v1, $v2, $offset, $size, $dc_offset1, $dc_offset2)
{
    ret(envelope2p($data_cont, $v1, $v2, $offset, $size, $dc_offset1, $dc_offset2));
}
functions.envelope2p = __envelope2p;

fn __gradient($pixi_container, $val1, $val2, $val3, $val4, $x, $y, $xsize, $ysize, $x_step, $y_step)
{
    ret(gradient($pixi_container, $val1, $val2, $val3, $val4, $x, $y, $xsize, $ysize, $x_step, $y_step));
}
functions.gradient = __gradient;

fn __fft($inverse, $im, $re, $size)
{
    ret(fft($inverse, $im, $re, $size));
}
functions.fft = __fft;

fn __new_filter($flags_for_future_use)
{
    ret(new_filter($flags_for_future_use));
}
functions.new_filter = __new_filter;

fn __remove_filter($filter)
{
    ret(remove_filter($filter));
}
functions.remove_filter = __remove_filter;

fn __reset_filter($filter)
{
    ret(reset_filter($filter));
}
functions.reset_filter = __reset_filter;

fn __init_filter($filter, $a, $b, $rshift, $flags)
{
    ret(init_filter($filter, $a, $b, $rshift, $flags));
}
functions.init_filter = __init_filter;

fn __apply_filter($filter, $output, $input, $flags, $offset, $size)
{
    ret(apply_filter($filter, $output, $input, $flags, $offset, $size));
}
functions.apply_filter = __apply_filter;

//dest, src, values, dest_offset, src_offset, size 
fn __replace_values($dest, $src, $values, $dest_offset, $src_offset, $size)
{
    ret(replace_values($dest, $src, $values, $dest_offset, $src_offset, $size));
}
functions.replace_values = __replace_values;

fn __copy_and_resize($dest, $src, $flags, $dest_x, $dest_y, $dest_rect_xsize, $dest_rect_ysize, $src_x, $src_y, $src_rect_xsize, $src_rect_ysize)
{
    ret(copy_and_resize($dest, $src, $flags, $dest_x, $dest_y, $dest_rect_xsize, $dest_rect_ysize, $src_x, $src_y, $src_rect_xsize, $src_rect_ysize));
}
functions.copy_and_resize = __copy_and_resize;

fn __conv_filter($dest, $src, $kernel, $div, $offset, $flags, $kernel_xcenter, $kernel_ycenter, $dest_x, $dest_y, $src_x, $src_y, $xsize, $ysize, $xstep, $ystep)
{
    ret(conv_filter($dest, $src, $kernel, $div, $offset, $flags, $kernel_xcenter, $kernel_ycenter, $dest_x, $dest_y, $src_x, $src_y, $xsize, $ysize, $xstep, $ystep));
}
functions.conv_filter = __conv_filter;

// Dialogs
fn __file_dialog($dialog_name, $mask, $id, $default_name, $flags)
{
    ret(file_dialog($dialog_name, $mask, $id, $default_name, $flags));
}
functions.file_dialog = __file_dialog;

fn __prefs_dialog()
{
    ret(prefs_dialog());
}
functions.prefs_dialog = __prefs_dialog;

fn __textinput_dialog($default_text, $dialog_name)
{
    ret(textinput_dialog($default_text, $dialog_name));
}
functions.textinput_dialog = __textinput_dialog;

// Network
fn __open_url($url_string)
{
    ret(open_url($url_string));
}
functions.open_url = __open_url;

// Native code
fn __dlopen($lib_file_name)
{
    ret(dlopen($lib_file_name));
}
functions.dlopen = __dlopen;

fn __dlclose($lib_id)
{
    ret(dlclose($lib_id));
}
functions.dlclose = __dlclose;

fn __dlsym($lib_id, $symbol_name, $format, $calling_convention)
{
    ret(dlsym($lib_id, $symbol_name, $format, $calling_convention));
}
functions.dlsym = __dlsym;

fn __dlcall($lib_id, $symbol_id, $optional_function_parameters)
{
    ret(dlcall($lib_id, $symbol_id, $optional_function_parameters));
}
functions.dlcall = __dlcall;

// System functions
fn __system($command)
{
    ret(system($command));
}
functions.system = __system;

fn __argc()
{
    ret(argc());
}
functions.argc = __argc;

fn __argv($n)
{
    ret(argv($n));
}
functions.argv = __argv;

fn __exit($exit_code)
{
    ret(exit($exit_code));
}
functions.exit = __exit;
